@using FactFinderWeb.ModelsView
@using FactFinderWeb.Services
@inject Microsoft.AspNetCore.Http.IHttpContextAccessor HttpContextAccessor
@using Microsoft.AspNetCore.Http;

@model AlertnessViewModel

@{
    ViewData["Title"] = "Awareness";
    Layout = "~/Views/Shared/_LayoutUser.cshtml";
     var userPlan = HttpContextAccessor.HttpContext.Session.GetString("UserPlan") ?? "Comprehensive";
    var _profileId = HttpContextAccessor.HttpContext.Request.RouteValues["pid"]?.ToString();
}
@{
    var profileData = ViewBag.ProfileData as FactFinderWeb.ModelsView.ProfileDataDto;
    string maritalStatus = @profileData?.MaritalStatus;
    bool showSpouseSection = string.IsNullOrEmpty(maritalStatus) || maritalStatus == "Married";
    var name = profileData?.Name ?? "NA";
    var spouseName = profileData?.SpouseName ?? "NA";
}

@functions {
    public string FormatINR(decimal? amount)
    {
        if (!amount.HasValue)
            return "0.00"; // or return ""; if you prefer empty

        var culture = new System.Globalization.CultureInfo("en-IN");
        // return string.Format(culture, "{0:N2}", amount.Value);
        return string.Format(culture, "{0:N0}", amount.Value);
    }
}

<style>
    .text-truncate-3 {
        overflow: hidden;
        display: -webkit-box;
        -webkit-line-clamp: 1;
        -webkit-box-orient: vertical;
    }
</style>
<style>
    .saving-emi-entry {
        padding-right: 2.5rem; /* space for delete button */
    }

    .fieldset-green {
        background-color: #e8f5e9;
        border: 2px solid #006400;
        padding: 1.5rem;
        border-radius: 0.5rem;
        margin-bottom: 1.5rem;
    }

    .legend-green {
        color: #006400;
        font-weight: bold;
    }

    .fieldset-blue {
        background-color: #e3f2fd;
        border: 2px solid #003366;
        padding: 1.5rem;
        border-radius: 0.5rem;
        margin-bottom: 1.5rem;
    }

    .legend-blue {
        color: #003366;
        font-weight: bold;
    }

    .fieldset-purple {
        background-color: #f3e5f5;
        border: 2px solid #4B0082;
        padding: 1.5rem;
        border-radius: 0.5rem;
        margin-bottom: 1.5rem;
    }

    .legend-purple {
        color: #4B0082;
        font-weight: bold;
    }

    .fieldset-maroon {
        background-color: #fce4ec;
        border: 2px solid #800000;
        padding: 1.5rem;
        border-radius: 0.5rem;
        margin-bottom: 1.5rem;
    }

    .legend-maroon {
        color: #800000;
        font-weight: bold;
    }

    .fieldset-teal {
        background-color: #e0f2f1;
        border: 2px solid #004d40;
        padding: 1.5rem;
        border-radius: 0.5rem;
        margin-bottom: 1.5rem;
    }

    .legend-teal {
        color: #004d40;
        font-weight: bold;
    }

    .fieldset-gray {
        background-color: #F5F5F5;
        border: 2px solid #BDBDBD;
        padding: 1.5rem;
        border-radius: 0.5rem;
        margin-bottom: 1.5rem;
    }

    .legend-gray {
        color: #424242;
        font-weight: bold;
    }

    .textbox-style {
        background-color: #f1f8f5;
        border: 1px solid #ced4da;
        border-radius: 0.375rem;
        padding: 0.375rem 0.75rem;
        min-height: 38px;
    }

    .btn-white-background {
        background-color: white !important;
        color: black !important;
        border-color: #f8f9fa; /* optional: match outline-light */
    }

    .saveButton {
        background-color: #4068a6 !important;
        border-color: #4068a6 !important;
        color: #fff !important;
        transition: filter 0.2s ease; /* smooth hover effect */
    }

        .saveButton:hover,
        .saveButton:focus {
            filter: brightness(90%); /* ~10% darker */
        }

        .saveButton:active {
            filter: brightness(80%); /* ~20% darker */
        }
</style>


<div class="mt-4">
    @await Html.PartialAsync("_StepProgress", 3)
    <div style="background-color: #E6E6FA" class="px-4 py-2 g-4 rounded d-flex flex-column gap-3">
        <div style="color:#006400" class="d-flex justify-content-between align-items-center">
            <h3 class="mb-0">3. ALERTNESS with Time & Money</h3>
        </div>
        <div class="more-less-section d-flex justify-content-between align-items-center">
            <p id="infoPara" class="text-truncate-3 mb-0">
                Goals drive us, goals motivate us and goals make us enthusiastic...
            </p>
            <div id="errorSummarySave" class="mt-3 text-danger fw-bold"></div>
            <button id="saveAndContinueBtn" class="btn saveButton">💾 Save & Continue</button>
        </div>
    </div>
</div>
<form id="alertnessForm" asp-antiforgery="true"  method="post" style="background-color: #F5F5F5" class="mt-3 p-3 d-flex flex-column gap-4 rounded"
      asp-route-planType="@userPlan"
      asp-route-id="@_profileId">
    
    <!--Manage  Income -->

    <fieldset class="d-flex flex-column gap-2 fieldset-green">
        <legend style="color: #3B3737" class="fw-bold">3.1 Budgeting </legend>
        <legend style="color: #3B3737" class="fw-bold ms-3">3.1.1 Income (Monthly)</legend>
        <div class="row g-3" style="color: #006400">
            <div class="col-12 col-md-4">
                <label asp-for="Basic" class="form-label"></label><span class="text-danger fw-bold ">*</span>
                <input asp-for="Basic" type="text" name="Basic" class="form-control amount-input income-extra-input" placeholder="0.00" maxlength="15">
                <span asp-validation-for="Basic" class="text-danger"></span>
                <input asp-for="ProfileId" name="ProfileId" type="hidden" class="form-control">
                <input asp-for="Id" name="Id" type="hidden" class="form-control">
            </div>

            <div class="col-12 col-md-4">
                <label asp-for="Hra" class="form-label gap-1 d-flex"></label>
                <input asp-for="Hra" class="form-control amount-input income-extra-input" placeholder="0.00" maxlength="15">
                <span asp-validation-for="Hra" class="text-danger"></span>
            </div>

            <div class="col-12 col-md-4">
                <label asp-for="EducationAllowance" class="form-label gap-1 d-flex"></label>
                <input asp-for="EducationAllowance" class="form-control amount-input income-extra-input" placeholder="0.00" maxlength="15">
                <span asp-validation-for="EducationAllowance" class="text-danger"></span>
            </div>

            <div class="col-12 col-md-4">
                <label asp-for="MedicalAllowance" class="form-label gap-1 d-flex"></label>
                <input asp-for="MedicalAllowance" class="form-control amount-input income-extra-input" placeholder="0.00" maxlength="15">
                <span asp-validation-for="MedicalAllowance" class="text-danger"></span>
            </div>

            <div class="col-12 col-md-4">
                <label asp-for="LTA" class="form-label gap-1 d-flex"></label>
                <input asp-for="LTA" class="form-control amount-input income-extra-input" placeholder="0.00" maxlength="15">
                <span asp-validation-for="LTA" class="text-danger"></span>
            </div>

            <div class="col-12 col-md-4">
                <label asp-for="Conveyance" class="form-label gap-1 d-flex"></label>
                <input asp-for="Conveyance" class="form-control amount-input income-extra-input" placeholder="0.00" maxlength="15">
                <span asp-validation-for="Conveyance" class="text-danger"></span>
            </div>

            <div class="col-12 col-md-4">
                <label asp-for="OtherAllowance" class="form-label gap-1 d-flex"></label>
                <input asp-for="OtherAllowance" class="form-control amount-input income-extra-input" placeholder="0.00" maxlength="15">
                <span asp-validation-for="OtherAllowance" class="text-danger"></span>
            </div>

            <div class="col-12 col-md-4">
                <label asp-for="PF" class="form-label gap-1 d-flex"></label>
                <input asp-for="PF" class="form-control amount-input income-extra-input" placeholder="0.00" maxlength="15">
                <span asp-validation-for="PF" class="text-danger"></span>
            </div>

            <div class="col-12 col-md-4">
                <label asp-for="Gratuity" class="form-label gap-1 d-flex"></label>
                <input asp-for="Gratuity" class="form-control amount-input income-extra-input" placeholder="0.00" maxlength="15">
                <span asp-validation-for="Gratuity" class="text-danger"></span>
            </div>

            <div class="col-12 col-md-4">
                <label asp-for="Reimbursement" class="form-label gap-1 d-flex"></label>
                <input asp-for="Reimbursement" class="form-control amount-input income-extra-input" placeholder="0.00" maxlength="15">
                <span asp-validation-for="Reimbursement" class="text-danger"></span>
            </div>

            <div class="col-12 col-md-4">
                <label asp-for="BusinessIncome" class="form-label gap-1 d-flex"></label>
                <input asp-for="BusinessIncome" class="form-control amount-input income-extra-input" placeholder="0.00" maxlength="15">
                <span asp-validation-for="BusinessIncome" class="text-danger"></span>
            </div>

            <div class="col-12 col-md-4">
                <label asp-for="FoodCoupon" class="form-label gap-1 d-flex"></label>
                <input asp-for="FoodCoupon" class="form-control amount-input income-extra-input" placeholder="0.00" maxlength="15">
                <span asp-validation-for="FoodCoupon" class="text-danger"></span>
            </div>

            <div class="col-12 col-md-4">
                <label asp-for="MonthlyPension" class="form-label gap-1 d-flex"></label>
                <input asp-for="MonthlyPension" class="form-control amount-input income-extra-input" placeholder="0.00" maxlength="15">
                <span asp-validation-for="MonthlyPension" class="text-danger"></span>
            </div>

            <div class="col-12 col-md-4">
                <label asp-for="InterestIncome" class="form-label gap-1 d-flex"></label>
                <input asp-for="InterestIncome" class="form-control amount-input income-extra-input" placeholder="0.00" maxlength="15">
                <span asp-validation-for="InterestIncome" class="text-danger"></span>
            </div>





            @if (Model.IncomeExtras != null && Model.IncomeExtras.Any())
            {
                for (int i = 0; i < Model.IncomeExtras.Count; i++)
                {
                    if (Model.IncomeExtras[i].Type == "Monthly")
                    {
                        <div class="col-12 col-md-4">
                            <span class="form-label gap-1 d-flex">@Model.IncomeExtras[i].FieldName (@Model.IncomeExtras[i].Type) </span>
                            <div class="textbox-style">
                                @Model.IncomeExtras[i].FieldValue.FormatDecimal()


                            </div>
                        </div>
                    }
                }
            }
            <div class="col-12 mt-3">
                <h5>Total Monthly Income: ₹<span id="incomeExtrasTotal">0</span></h5>
            </div>
        </div>
        <hr />
        <legend style="color: #3B3737" class="fw-bold ms-3">  Income (Annually)</legend>
        <div class="row g-3" style="color:	#006400">
            <div class="col-12 col-md-4">
                <label asp-for="AnnualBonus" class="form-label gap-1 d-flex"></label>
                <input asp-for="AnnualBonus" class="form-control amount-input income-extra-annual-input" placeholder="0.00" maxlength="15" />
                <span asp-validation-for="AnnualBonus" class="text-danger"></span>
            </div>

            <div class="col-12 col-md-4">
                <label asp-for="PerformanceLinked" class="form-label gap-1 d-flex"></label>
                <input asp-for="PerformanceLinked" class="form-control amount-input income-extra-annual-input" placeholder="0.00" maxlength="15" />
                <span asp-validation-for="PerformanceLinked" class="text-danger"></span>
            </div>

            @if (Model.IncomeExtras != null && Model.IncomeExtras.Any())
            {
                for (int i = 0; i < Model.IncomeExtras.Count; i++)
                {
                    if (Model.IncomeExtras[i].Type == "Annual")
                    {
                        <div class="col-12 col-md-4">
                            <span class="form-label gap-1 d-flex">@Model.IncomeExtras[i].FieldName (@Model.IncomeExtras[i].Type) </span>
                            <div class="textbox-style">
                                @Model.IncomeExtras[i].FieldValue.FormatDecimal()


                            </div>
                        </div>
                    }
                }
            }

        </div>
        <hr />
        <div class="row g-3" style="color: #006400">

            <div class="col-12 col-md-6 mt-3 d-none">
                <h5>
                    Total Annual Income (Fixed Annual Entries): ₹
                    <span id="incomeExtrasAnnualTotal" class="fw-semibold text-primary"></span>
                </h5>
            </div>

            <div class="col-12 col-md-6 mt-3 d-none text-nowrap">
                <h5>
                    Total Monthly Income for the Year (Monthly Amount × 12): ₹
                    <span id="monthlyAnnualTotal" class="text-info fw-semibold"></span>
                </h5>
            </div>

            <div class="col-12 col-md-6 mt-3 text-nowrap">

                Annual Income (Monthly × 12 + Annual): ₹
                <span id="incomeExtrasGrandTotal" class="text-warning fw-bold"></span>

            </div>

            <div class="col-12 col-md-6 mt-3 text-nowrap">

                Avg.Monthly Income (Annual Total ÷ 12): ₹
                <span id="grandTotalPerMonth" class="fw-bold text-success"></span>

            </div>

        </div>
        <hr />

        <legend style="color: #3B3737" class="fw-bold"></legend>
        <div class="row g-3 d-none" style="color:	#006400">

            <div class="col-12 col-md-4">
                <label asp-for="PostITIncomeOld" class="form-label gap-1 d-flex"></label>
                <input asp-for="PostITIncomeOld" type="text" name="PostITIncomeOld" class="form-control amount-input" placeholder="0.00" maxlength="15">
                <span asp-validation-for="PostITIncomeOld" class="text-danger"></span>
            </div>
            <div class="col-12 col-md-4">
                <label asp-for="PostITIncomeNew" class="form-label gap-1 d-flex"></label>
                <input asp-for="PostITIncomeNew" type="text" name="PostITIncomeNew" class="form-control amount-input" placeholder="0.00" maxlength="15">
                <span asp-validation-for="PostITIncomeNew" class="text-danger"></span>

            </div>
        </div>

        <hr />
        <div class="card shadow-sm border-success">
            <div class="card-header bg-success text-white d-flex align-items-center justify-content-between">
                <h5 class="mb-0 d-flex align-items-center">
                    <i class="fas fa-hand-holding-usd me-2"></i> Edited data will be saved after click on SUBMIT button
                </h5>
                <button type="button" id="addIncomeExtra" class="btn btn-outline-light btn-sm btn-white-background">+ Add Income</button>
            </div>

            <div id="incomeExtrasSection" class="card-body">
                <div id="incomeExtrasContainer">
                    <!-- Desktop Header Row: hidden on mobile -->
                    <div class="row fw-bold text-dark align-items-center p-2 mb-1 d-none d-md-flex">
                        <div class="col-sm text-left">Other Income</div>
                        <div class="col-sm text-left">Amount</div>
                        <div class="col-sm text-left">Type (Monthly/Annual)</div>
                        <div class="col-md-auto text-end">Action</div>
                    </div>
                    @if (Model.IncomeExtras != null && Model.IncomeExtras.Any())
                    {
                        for (int i = 0; i < Model.IncomeExtras.Count; i++)
                        {

                            <div class="row g-2 align-items-center p-2 mb-1 income-extra justify-content-between">
                                <!-- Other Income -->
                                <div class="col-sm">
                                    <span class="d-block d-md-none fw-bold text-dark mb-1">Other Income</span>
                                    <input type="text"
                                           name="IncomeExtras[@i].FieldName"
                                           value="@Model.IncomeExtras[i].FieldName"
                                           placeholder="Name"
                                           required
                                           class="form-control w-100" />
                                </div>

                                <!-- Amount -->
                                <div class="col-sm">
                                    <span class="d-block d-md-none fw-bold text-dark mb-1">Amount</span>
                                    <input type="text"
                                           name="IncomeExtras[@i].FieldValue"
                                           value="@Model.IncomeExtras[i].FieldValue"
                                           placeholder="0.00" maxlength="15"
                                           required
                                           class="form-control w-100 amount-input @(Model.IncomeExtras[i].Type == "Monthly" ? "income-extra-input" : "income-extra-annual-input")" />
                                </div>

                                <!-- Type -->
                                <div class="col-sm">
                                    <span class="d-block d-md-none fw-bold text-dark mb-1">Type (Monthly/Annual)</span>
                                    @Html.DropDownListFor(m => m.IncomeExtras[i].Type,
                                    new SelectList(new[] { "Monthly", "Annual" }),
                                                        "Select",
                                                        new { @class = "form-select w-100", required = "required" })
                            @Html.ValidationMessageFor(m => m.IncomeExtras[i].Type, "", new { @class = "text-danger" })
                        </div>

                        <!-- Action -->
                        <div class="col-md-auto col-sm-12 text-center">
                            <span class="d-block d-md-none fw-bold text-dark mb-1">Action</span>
                            <button type="button" class="btn btn-danger btn-sm delete-income-extra" title="Remove">&times;</button>
                        </div>
                    </div>

                                        }
                                        }
                </div>
            </div>
        </div>

        <div id="spouse" class="@(showSpouseSection ? "" : "d-none")">
            <legend style="color: #3B3737" class="fw-bold"> 3.1.2 Spouse Income (Monthly)</legend>
            <div class="row g-3" style="color:	#006400">
                <!-- Begin Spouse Income Fields -->
                <div class="col-12 col-md-4">
                    <label asp-for="SpouseBasic" class="form-label gap-1 d-flex"></label>
                    <input asp-for="SpouseBasic" type="text" name="SpouseBasic" class="form-control amount-input income-extra-input-spouse" placeholder="0.00" maxlength="15">
                    <span asp-validation-for="SpouseBasic" class="text-danger"></span>
                </div>

                <div class="col-12 col-md-4">
                    <label asp-for="SpouseHRA" class="form-label gap-1 d-flex"></label>
                    <input asp-for="SpouseHRA" type="text" name="SpouseHRA" class="form-control amount-input income-extra-input-spouse" placeholder="0.00" maxlength="15">
                    <span asp-validation-for="SpouseHRA" class="text-danger"></span>
                </div>

                <div class="col-12 col-md-4">
                    <label asp-for="SpouseEducationAllowance" class="form-label gap-1 d-flex"></label>
                    <input asp-for="SpouseEducationAllowance" type="text" name="SpouseEducationAllowance" class="form-control amount-input income-extra-input-spouse" placeholder="0.00" maxlength="15">
                    <span asp-validation-for="SpouseEducationAllowance" class="text-danger"></span>
                </div>

                <div class="col-12 col-md-4">
                    <label asp-for="SpouseMedicalAllowance" class="form-label gap-1 d-flex"></label>
                    <input asp-for="SpouseMedicalAllowance" type="text" name="SpouseMedicalAllowance" class="form-control amount-input income-extra-input-spouse" placeholder="0.00" maxlength="15">
                    <span asp-validation-for="SpouseMedicalAllowance" class="text-danger"></span>
                </div>

                <div class="col-12 col-md-4">
                    <label asp-for="SpouseLTA" class="form-label gap-1 d-flex"></label>
                    <input asp-for="SpouseLTA" type="text" name="SpouseLTA" class="form-control amount-input income-extra-input-spouse" placeholder="0.00" maxlength="15">
                    <span asp-validation-for="SpouseLTA" class="text-danger"></span>
                </div>

                <div class="col-12 col-md-4">
                    <label asp-for="SpouseConveyance" class="form-label gap-1 d-flex"></label>
                    <input asp-for="SpouseConveyance" type="text" name="SpouseConveyance" class="form-control amount-input income-extra-input-spouse" placeholder="0.00" maxlength="15">
                    <span asp-validation-for="SpouseConveyance" class="text-danger"></span>
                </div>

                <div class="col-12 col-md-4">
                    <label asp-for="SpouseOtherAllowance" class="form-label gap-1 d-flex"></label>
                    <input asp-for="SpouseOtherAllowance" type="text" name="SpouseOtherAllowance" class="form-control amount-input income-extra-input-spouse" placeholder="0.00" maxlength="15">
                    <span asp-validation-for="SpouseOtherAllowance" class="text-danger"></span>
                </div>

                <div class="col-12 col-md-4">
                    <label asp-for="SpousePF" class="form-label gap-1 d-flex"></label>
                    <input asp-for="SpousePF" type="text" name="SpousePF" class="form-control amount-input income-extra-input-spouse" placeholder="0.00" maxlength="15">
                    <span asp-validation-for="SpousePF" class="text-danger"></span>
                </div>

                <div class="col-12 col-md-4">
                    <label asp-for="SpouseGratuity" class="form-label gap-1 d-flex"></label>
                    <input asp-for="SpouseGratuity" type="text" name="SpouseGratuity" class="form-control amount-input income-extra-input-spouse" placeholder="0.00" maxlength="15">
                    <span asp-validation-for="SpouseGratuity" class="text-danger"></span>
                </div>

                <div class="col-12 col-md-4">
                    <label asp-for="SpouseReimbursement" class="form-label gap-1 d-flex"></label>
                    <input asp-for="SpouseReimbursement" type="text" name="SpouseReimbursement" class="form-control amount-input income-extra-input-spouse" placeholder="0.00" maxlength="15">
                    <span asp-validation-for="SpouseReimbursement" class="text-danger"></span>
                </div>

                <div class="col-12 col-md-4">
                    <label asp-for="SpouseBusinessIncome" class="form-label gap-1 d-flex"></label>
                    <input asp-for="SpouseBusinessIncome" type="text" name="SpouseBusinessIncome" class="form-control amount-input income-extra-input-spouse" placeholder="0.00" maxlength="15">
                    <span asp-validation-for="SpouseBusinessIncome" class="text-danger"></span>
                </div>

                <div class="col-12 col-md-4">
                    <label asp-for="SpouseFoodCoupon" class="form-label gap-1 d-flex"></label>
                    <input asp-for="SpouseFoodCoupon" type="text" name="SpouseFoodCoupon" class="form-control amount-input income-extra-input-spouse" placeholder="0.00" maxlength="15">
                    <span asp-validation-for="SpouseFoodCoupon" class="text-danger"></span>
                </div>

                <div class="col-12 col-md-4">
                    <label asp-for="SpouseMonthlyPension" class="form-label gap-1 d-flex"></label>
                    <input asp-for="SpouseMonthlyPension" type="text" name="SpouseMonthlyPension" class="form-control amount-input income-extra-input-spouse" placeholder="0.00" maxlength="15">
                    <span asp-validation-for="SpouseMonthlyPension" class="text-danger"></span>
                </div>

                <div class="col-12 col-md-4">
                    <label asp-for="SpouseInterestIncome" class="form-label gap-1 d-flex"></label>
                    <input asp-for="SpouseInterestIncome" type="text" name="SpouseInterestIncome" class="form-control amount-input income-extra-input-spouse" placeholder="0.00" maxlength="15">
                    <span asp-validation-for="SpouseInterestIncome" class="text-danger"></span>
                </div>

                <!-- End Spouse Income Fields -->
                @if (Model.SpouseExtras != null && Model.SpouseExtras.Any())
                {
                    for (int i = 0; i < Model.SpouseExtras.Count; i++)
                    {
                        if (Model.SpouseExtras[i].Type == "Monthly")
                        {
                            <div class="col-12 col-md-4">
                                <span class="form-label gap-1 d-flex">
                                    @Model.SpouseExtras[i].FieldName (@Model.SpouseExtras[i].Type)
                                </span>
                                <div class="textbox-style">
                                    @Model.SpouseExtras[i].FieldValue.FormatDecimal()
                                </div>
                            </div>
                        }
                    }
                }




                <div class="col-12 mt-3">
                    <input asp-for="SpouseMonthlyTotalIncome" type="hidden" name="SpouseMonthlyTotalIncome" class="form-control amount-input">
                    <h5>Total Monthly Income: ₹<span id="incomeExtrasTotalSpouse"></span></h5>
                </div>
            </div>
            <hr />

            <legend style="color: #3B3737" class="fw-bold ms-3">  Spouse Income (Annual)</legend>
            <div class="row g-3" style="color:	#006400">

                <div class="col-12 col-md-4">
                    <label asp-for="SpouseAnnualBonus" class="form-label gap-1 d-flex"></label>
                    <input asp-for="SpouseAnnualBonus" type="text" name="SpouseAnnualBonus" class="form-control amount-input income-extra-annual-input-spouse" placeholder="0.00" maxlength="15">
                    <span asp-validation-for="SpouseAnnualBonus" class="text-danger"></span>
                </div>
                <div class="col-12 col-md-4">
                    <label asp-for="SpousePerformanceLinked" class="form-label gap-1 d-flex"></label>
                    <input asp-for="SpousePerformanceLinked" type="text" name="SpousePerformanceLinked" class="form-control amount-input income-extra-annual-input-spouse" placeholder="0.00" maxlength="15">
                    <span asp-validation-for="SpousePerformanceLinked" class="text-danger"></span>
                </div>

                <!-- End Spouse Income Fields -->
                @if (Model.SpouseExtras != null && Model.SpouseExtras.Any())
                {
                    for (int i = 0; i < Model.SpouseExtras.Count; i++)
                    {
                        if (Model.SpouseExtras[i].Type == "Annual")
                        {
                            <div class="col-12 col-md-4">
                                <span class="form-label gap-1 d-flex">
                                    @Model.SpouseExtras[i].FieldName (@Model.SpouseExtras[i].Type)
                                </span>
                                <div class="textbox-style">
                                    @Model.SpouseExtras[i].FieldValue.FormatDecimal()
                                </div>
                            </div>
                        }
                    }
                }
            </div>
            <hr />


            <hr />
            <div class="row g-3" style="color: #006400">

                <div class="col-12 col-md-6 mt-3 d-none text-nowrap">
                    <h5>
                        Total Annual Income (Fixed Annual Entries): ₹
                        <span id="incomeExtrasAnnualTotalSpouse"></span>
                    </h5>
                </div>

                <div class="col-12 col-md-6 mt-3 d-none text-nowrap">
                    <h5>
                        Total Monthly Income for the Year (Monthly Amount × 12): ₹
                        <span id="monthlyAnnualTotalSpouse" class="text-info fw-semibold"></span>
                    </h5>
                    </h5>
                </div>

                <div class="col-12 col-md-6 mt-3 text-nowrap">
                    Annual Income (Monthly × 12 + Annual): ₹
                    <span id="incomeExtrasGrandTotalSpouse" class="text-warning fw-bold"></span>

                </div>

                <div class="col-12 col-md-6 mt-3">
                    Avg.Monthly Income (Annual Total ÷ 12): ₹
                    <span id="grandTotalPerMonthSpouse" class="fw-bold text-success"></span>

                </div>

            </div>

            <hr />

            <legend style="color: #3B3737" class="fw-bold"></legend>
            <div class="row g-3 d-none" style="color:	#006400">

                <div class="col-12 col-md-4">
                    <label asp-for="SpousePostITIncomeOld" class="form-label gap-1 d-flex"></label>
                    <input asp-for="SpousePostITIncomeOld" type="text" name="SpousePostITIncomeOld" class="form-control amount-input" placeholder="0.00" maxlength="15">
                    <span asp-validation-for="SpousePostITIncomeOld" class="text-danger"></span>
                </div>
                <div class="col-12 col-md-4">
                    <label asp-for="SpousePostITIncomeNew" class="form-label gap-1 d-flex"></label>
                    <input asp-for="SpousePostITIncomeNew" type="text" name="SpousePostITIncomeNew" class="form-control amount-input">
                    <span asp-validation-for="SpousePostITIncomeNew" class="text-danger"></span>
                    <input asp-for="SpouseConsolidatedIncome" type="hidden" name="SpouseConsolidatedIncome" class="form-control amount-input" placeholder="0.00" maxlength="15">
                    <input asp-for="SpouseAnnualTotalIncome" type="hidden" name="SpouseAnnualTotalIncome" class="form-control amount-input">
                </div>
            </div>
            <hr />
            <div class="card border-success mb-4" style="background-color: #e8f5e9;">
                <div class="card-header bg-success text-white d-flex align-items-center justify-content-between">
                    <h5 class="mb-0 d-flex align-items-center"><i class="fas fa-hand-holding-usd me-2"></i>Edited data will be saved after click on SUBMIT button</h5>
                    <button type="button" id="addSpouseExtra" class="btn btn-outline-light btn-sm btn-white-background">+ Add Spouse Income</button>
                </div>

                <div id="spouseExtrasSection" class="card-body">
                    <div id="spouseExtrasContainer">
                        <!-- Desktop Header Row: hidden on mobile -->
                        <div class="row fw-bold text-dark align-items-center p-2 mb-1 d-none d-md-flex">
                            <div class="col-sm text-left">Other Income</div>
                            <div class="col-sm text-left">Amount</div>
                            <div class="col-sm text-left">Type (Monthly/Annual)</div>
                            <div class="col-md-auto text-end">Action</div>
                        </div>
                        <!-- Initially empty; no inputs here -->
                        @if (Model.SpouseExtras != null && Model.SpouseExtras.Any())
                        {

                            for (int i = 0; i < Model.SpouseExtras.Count; i++)
                            {
                                <div class="row g-2 align-items-center p-2 mb-1 spouse-extra justify-content-between">
                                    <div class="col-sm">
                                        <span class="d-block d-md-none fw-bold text-dark mb-1">Other Income</span>
                                        <input type="text"
                                               name="SpouseExtras[@i].FieldName"
                                               value="@Model.SpouseExtras[i].FieldName"
                                               placeholder="Name"
                                               required
                                               class="form-control w-100" />
                                    </div>
                                    <!-- Amount -->
                                    <div class="col-sm">
                                        <span class="d-block d-md-none fw-bold text-dark mb-1">Amount</span>
                                        <input type="text"
                                               name="SpouseExtras[@i].FieldValue"
                                               value="@Model.SpouseExtras[i].FieldValue"
                                               placeholder="0.00" maxlength="15"
                                               required
                                               class="form-control amount-input @(Model.SpouseExtras[i].Type == "Monthly" ? "income-extra-input-spouse" : "income-extra-annual-input-spouse") " />
                                    </div>
                                    <!-- Type -->
                                    <div class="col-sm">
                                        <span class="d-block d-md-none fw-bold text-dark mb-1">Type (Monthly/Annual)</span>

                                        @Html.DropDownListFor(m => m.SpouseExtras[i].Type,
                                        new SelectList(new[] {
                                                                "Monthly", "Annual",
                                                                }),
                                                                "Select ",
                                                                new { @class = "form-select", required = "required" })
                                @Html.ValidationMessageFor(m => m.SpouseExtras[i].Type, "", new { @class = "text-danger" })
                            </div>
                            <!-- Action -->
                            <div class="col-md-auto col-sm-12 text-center">
                                <span class="d-block d-md-none fw-bold text-dark mb-1">Action</span>
                                <button type="button" class="btn btn-danger btn-sm delete-spouse-extra" title="Remove">&times;</button>
                            </div>
                        </div>

                                                }
                                                }

                    </div>
                </div>
            </div>

        </div>

    </fieldset>



    <hr />
    <!--Manage  Expense -->
    @{
        var homeExpenses = Model.ExpenseNew?.Where(e => e.Section == "Home").ToList() ?? new List<TblffAlertnesExpenseNew>();
        var conveyanceExpenses = Model.ExpenseNew?.Where(e => e.Section == "Conveyance").ToList() ?? new List<TblffAlertnesExpenseNew>();
        var communicationExpenses = Model.ExpenseNew?.Where(e => e.Section == "Communication").ToList() ?? new List<TblffAlertnesExpenseNew>();
        var utilitiesExpenses = Model.ExpenseNew?.Where(e => e.Section == "Utilities").ToList() ?? new List<TblffAlertnesExpenseNew>();
        var educationExpenses = Model.ExpenseNew?.Where(e => e.Section == "Education").ToList() ?? new List<TblffAlertnesExpenseNew>();
        var entertainmentExpenses = Model.ExpenseNew?.Where(e => e.Section == "Entertainment").ToList() ?? new List<TblffAlertnesExpenseNew>();
        var newReplacementExpenses = Model.ExpenseNew?.Where(e => e.Section == "Replacement Item").ToList() ?? new List<TblffAlertnesExpenseNew>();
        var insuranceExpenses = Model.ExpenseNew?.Where(e => e.Section == "Insurance").ToList() ?? new List<TblffAlertnesExpenseNew>();

    }
    <fieldset class="d-flex flex-column gap-2 fieldset-blue">

        <legend style="color: #3B3737" class="fw-bold">3.1.2 Expense (Monthly)</legend>

        <legend style="color: #3B3737" class="fw-bold">🏠 Home Expenses </legend>
        <div class="row g-3" style="color:	#006400">
            <div class="col-12 col-md-4">
                <label asp-for="ExpenseDetail.GroceryProvisionMilk"></label><span class="text-danger fw-bold ">*</span>
                <input asp-for="ExpenseDetail.GroceryProvisionMilk" value="@Model.Basic" class="form-control amount-input income-expense-input" placeholder="0.00" maxlength="15" />
                <span asp-validation-for="ExpenseDetail.GroceryProvisionMilk" class="text-danger"></span>
                <input asp-for="ExpenseDetail.Id" name="ExpenseDetail.Id" type="hidden" class="form-control">
            </div>


            <div class="col-12 col-md-4">
                <label asp-for="ExpenseDetail.DomesticHelp"></label>
                <input asp-for="ExpenseDetail.DomesticHelp" class="form-control amount-input income-expense-input" placeholder="0.00" maxlength="15" />
                <span asp-validation-for="ExpenseDetail.DomesticHelp" class="text-danger"></span>
            </div>


            <div class="col-12 col-md-4">
                <label asp-for="ExpenseDetail.IronLaundry"></label>
                <input asp-for="ExpenseDetail.IronLaundry" class="form-control amount-input income-expense-input" placeholder="0.00" maxlength="15" />
                <span asp-validation-for="ExpenseDetail.IronLaundry" class="text-danger"></span>
            </div>




            <!-- other Home Expenses -->
            @if (homeExpenses.Any())
            {

                @for (int i = 0; i < homeExpenses.Count; i++)
                {
                    <div class="col-12 col-md-4">
                        <span class="form-label gap-1 d-flex">
                            @homeExpenses[i].FieldName (@homeExpenses[i].Section / @homeExpenses[i].Type)
                        </span>

                        <div class="textbox-style">

                            @FormatINR(decimal.TryParse(homeExpenses[i].FieldValue, out var v) ? v : 0)
                        </div>
                    </div>
                }
            }

        </div>

        <hr />


        <legend style="color: #3B3737" class="fw-bold">🚗 Conveyance Expenses</legend>
        <div class="row g-3" style="color:	#006400">
            <div class="col-12 col-md-4">
                <label asp-for="ExpenseDetail.Driver"></label>
                <input asp-for="ExpenseDetail.Driver" class="form-control amount-input income-expense-input" placeholder="0.00" maxlength="15" />
                <span asp-validation-for="ExpenseDetail.Driver" class="text-danger"></span>
            </div>


            <div class="col-12 col-md-4">
                <label asp-for="ExpenseDetail.Fuel"></label>
                <input asp-for="ExpenseDetail.Fuel" class="form-control amount-input" placeholder="0.00" maxlength="15" />
                <span asp-validation-for="ExpenseDetail.Fuel" class="text-danger"></span>
            </div>


            <div class="col-12 col-md-4">
                <label asp-for="ExpenseDetail.CarCleaning"></label>
                <input asp-for="ExpenseDetail.CarCleaning" class="form-control amount-input income-expense-input" placeholder="0.00" maxlength="15" />
                <span asp-validation-for="ExpenseDetail.CarCleaning" class="text-danger"></span>
            </div>


            <div class="col-12 col-md-4">
                <label asp-for="ExpenseDetail.Maintenance"></label>
                <input asp-for="ExpenseDetail.Maintenance" class="form-control amount-input income-expense-input" placeholder="0.00" maxlength="15" />
                <span asp-validation-for="ExpenseDetail.Maintenance" class="text-danger"></span>
            </div>


            <div class="col-12 col-md-4">
                <label asp-for="ExpenseDetail.TaxiPublicTransport"></label>
                <input asp-for="ExpenseDetail.TaxiPublicTransport" class="form-control amount-input income-expense-input" placeholder="0.00" maxlength="15" />
                <span asp-validation-for="ExpenseDetail.TaxiPublicTransport" class="text-danger"></span>
            </div>


            <div class="col-12 col-md-4">
                <label asp-for="ExpenseDetail.AirTrainTravel"></label>
                <input asp-for="ExpenseDetail.AirTrainTravel" class="form-control amount-input income-expense-input" placeholder="0.00" maxlength="15" />
                <span asp-validation-for="ExpenseDetail.AirTrainTravel" class="text-danger"></span>
            </div>



            <!-- Other Conveyance Expenses -->
            @if (conveyanceExpenses.Any())
            {

                @for (int i = 0; i < conveyanceExpenses.Count; i++)
                {
                    <div class="col-12 col-md-4">
                        <span class="form-label gap-1 d-flex">@conveyanceExpenses[i].FieldName (@conveyanceExpenses[i].Section / @conveyanceExpenses[i].Type) </span>
                        <div class="textbox-style amount-input">
                            @FormatINR(decimal.TryParse(conveyanceExpenses[i].FieldValue, out var v) ? v : 0)
                        </div>
                    </div>
                }
            }

        </div>

        <hr />

        <legend style="color: #3B3737" class="fw-bold">📞 Communication</legend>
        <div class="row g-3" style="color:	#006400">
            <div class="col-12 col-md-4">
                <label asp-for="ExpenseDetail.Mobile"></label>
                <input asp-for="ExpenseDetail.Mobile" class="form-control income-expense-input amount-input" placeholder="0.00" maxlength="15" />
                <span asp-validation-for="ExpenseDetail.Mobile" class="text-danger"></span>
            </div>


            <div class="col-12 col-md-4">
                <label asp-for="ExpenseDetail.LandlineBroadband"></label>
                <input asp-for="ExpenseDetail.LandlineBroadband" class="form-control income-expense-input amount-input" placeholder="0.00" maxlength="15" />
                <span asp-validation-for="ExpenseDetail.LandlineBroadband" class="text-danger"></span>
            </div>


            <div class="col-12 col-md-4">
                <label asp-for="ExpenseDetail.DataCard"></label>
                <input asp-for="ExpenseDetail.DataCard" class="form-control income-expense-input amount-input" placeholder="0.00" maxlength="15" />
                <span asp-validation-for="ExpenseDetail.DataCard" class="text-danger"></span>
            </div>


            <!-- Communication Expenses -->
            @if (communicationExpenses.Any())
            {

                @for (int i = 0; i < communicationExpenses.Count; i++)
                {
                    <div class="col-12 col-md-4">
                        <span class="form-label gap-1 d-flex">@communicationExpenses[i].FieldName (@communicationExpenses[i].Section / @communicationExpenses[i].Type) </span>
                        <div class="textbox-style">



                            @FormatINR(decimal.TryParse(communicationExpenses[i].FieldValue, out var v) ? v : 0)
                        </div>
                    </div>
                }
            }
        </div>



        <hr />

        <legend style="color: #3B3737" class="fw-bold">💡 Utilities</legend>
        <div class="row g-3" style="color:	#006400">

            <div class="col-12 col-md-4">
                <label asp-for="ExpenseDetail.Electricity"></label>
                <input asp-for="ExpenseDetail.Electricity" class="form-control income-expense-input amount-input" placeholder="0.00" maxlength="15" />
                <span asp-validation-for="ExpenseDetail.Electricity" class="text-danger"></span>
            </div>


            <div class="col-12 col-md-4">
                <label asp-for="ExpenseDetail.HouseTax"></label>
                <input asp-for="ExpenseDetail.HouseTax" class="form-control income-expense-input amount-input" placeholder="0.00" maxlength="15" />
                <span asp-validation-for="ExpenseDetail.HouseTax" class="text-danger"></span>
            </div>


            <div class="col-12 col-md-4">
                <label asp-for="ExpenseDetail.SocietyCharge"></label>
                <input asp-for="ExpenseDetail.SocietyCharge" class="form-control income-expense-input amount-input" placeholder="0.00" maxlength="15" />
                <span asp-validation-for="ExpenseDetail.SocietyCharge" class="text-danger"></span>
            </div>


            <div class="col-12 col-md-4">
                <label asp-for="ExpenseDetail.Rents"></label>
                <input asp-for="ExpenseDetail.Rents" class="form-control income-expense-input amount-input" placeholder="0.00" maxlength="15" />
                <span asp-validation-for="ExpenseDetail.Rents" class="text-danger"></span>
            </div>


            <div class="col-12 col-md-4">
                <label asp-for="ExpenseDetail.Cable"></label>
                <input asp-for="ExpenseDetail.Cable" class="form-control income-expense-input amount-input" placeholder="0.00" maxlength="15" />
                <span asp-validation-for="ExpenseDetail.Cable" class="text-danger"></span>
            </div>


            <div class="col-12 col-md-4">
                <label asp-for="ExpenseDetail.Lpg"></label>
                <input asp-for="ExpenseDetail.Lpg" class="form-control income-expense-input amount-input" placeholder="0.00" maxlength="15" />
                <span asp-validation-for="ExpenseDetail.Lpg" class="text-danger"></span>
            </div>


            <div class="col-12 col-md-4">
                <label asp-for="ExpenseDetail.WaterBill"></label>
                <input asp-for="ExpenseDetail.WaterBill" class="form-control income-expense-input amount-input" placeholder="0.00" maxlength="15" />
                <span asp-validation-for="ExpenseDetail.WaterBill" class="text-danger"></span>
            </div>


            <div class="col-12 col-md-4">
                <label asp-for="ExpenseDetail.NewsPaper"></label>
                <input asp-for="ExpenseDetail.NewsPaper" class="form-control income-expense-input amount-input" placeholder="0.00" maxlength="15" />
                <span asp-validation-for="ExpenseDetail.NewsPaper" class="text-danger"></span>
            </div>




            <!-- other Utilities -->
            @if (utilitiesExpenses.Any())
            {

                @for (int i = 0; i < utilitiesExpenses.Count; i++)
                {
                    <div class="col-12 col-md-4">
                        <span class="form-label gap-1 d-flex">@utilitiesExpenses[i].FieldName (@utilitiesExpenses[i].Section / @utilitiesExpenses[i].Type) </span>
                        <div class="textbox-style">

                            @FormatINR(decimal.TryParse(utilitiesExpenses[i].FieldValue, out var v) ? v : 0)

                        </div>
                    </div>
                }
            }
        </div>




        <hr />
        <legend style="color: #3B3737" class="fw-bold">🎓 Education Expenses</legend>
        <div class="row g-3" style="color:	#006400">
            <div class="col-12 col-md-4">
                <label asp-for="ExpenseDetail.SchoolFees"></label>
                <input asp-for="ExpenseDetail.SchoolFees" class="form-control income-expense-input amount-input" placeholder="0.00" maxlength="15" />
                <span asp-validation-for="ExpenseDetail.SchoolFees" class="text-danger"></span>
            </div>



            <div class="col-12 col-md-4">
                <label asp-for="ExpenseDetail.Tuitions"></label>
                <input asp-for="ExpenseDetail.Tuitions" class="form-control income-expense-input amount-input" placeholder="0.00" maxlength="15" />
                <span asp-validation-for="ExpenseDetail.Tuitions" class="text-danger"></span>
            </div>


            <div class="col-12 col-md-4">
                <label asp-for="ExpenseDetail.UniformsAccessories"></label>
                <input asp-for="ExpenseDetail.UniformsAccessories" class="form-control income-expense-input amount-input" placeholder="0.00" maxlength="15" />
                <span asp-validation-for="ExpenseDetail.UniformsAccessories" class="text-danger"></span>
            </div>


            <div class="col-12 col-md-4">
                <label asp-for="ExpenseDetail.BooksStationery"></label>
                <input asp-for="ExpenseDetail.BooksStationery" class="form-control income-expense-input amount-input" placeholder="0.00" maxlength="15" />
                <span asp-validation-for="ExpenseDetail.BooksStationery" class="text-danger"></span>
            </div>


            <div class="col-12 col-md-4">
                <label asp-for="ExpenseDetail.PicnicsActivities"></label>
                <input asp-for="ExpenseDetail.PicnicsActivities" class="form-control income-expense-input amount-input" placeholder="0.00" maxlength="15" />
                <span asp-validation-for="ExpenseDetail.PicnicsActivities" class="text-danger"></span>
            </div>




            <!-- other Education Expenses -->
            @if (educationExpenses.Any())
            {

                @for (int i = 0; i < educationExpenses.Count; i++)
                {
                    <div class="col-12 col-md-4">
                        <span class="form-label gap-1 d-flex">@educationExpenses[i].FieldName (@educationExpenses[i].Section / @educationExpenses[i].Type) </span>
                        <div class="textbox-style">


                            @FormatINR(decimal.TryParse(educationExpenses[i].FieldValue, out var v) ? v : 0)
                        </div>
                    </div>
                }
            }


        </div>



        <hr />

        <legend style="color: #3B3737" class="fw-bold">🎭  Entertainment/Recreation Expenses</legend>
        <div class="row g-3" style="color:	#006400">
            <div class="col-12 col-md-4">
                <label asp-for="ExpenseDetail.MoviesTheatre"></label>
                <input asp-for="ExpenseDetail.MoviesTheatre" class="form-control income-expense-input amount-input" placeholder="0.00" maxlength="15" />
                <span asp-validation-for="ExpenseDetail.MoviesTheatre" class="text-danger"></span>
            </div>


            <div class="col-12 col-md-4">
                <label asp-for="ExpenseDetail.DiningOut"></label>
                <input asp-for="ExpenseDetail.DiningOut" class="form-control income-expense-input amount-input" placeholder="0.00" maxlength="15" />
                <span asp-validation-for="ExpenseDetail.DiningOut" class="text-danger"></span>
            </div>

            <div class="col-12 col-md-4">
                <label asp-for="ExpenseDetail.ClubhouseExpenses"></label>
                <input asp-for="ExpenseDetail.ClubhouseExpenses" class="form-control income-expense-input amount-input" placeholder="0.00" maxlength="15" />
                <span asp-validation-for="ExpenseDetail.ClubhouseExpenses" class="text-danger"></span>
            </div>


            <div class="col-12 col-md-4">
                <label asp-for="ExpenseDetail.PartiesAtHome"></label>
                <input asp-for="ExpenseDetail.PartiesAtHome" class="form-control income-expense-input amount-input" placeholder="0.00" maxlength="15" />
                <span asp-validation-for="ExpenseDetail.PartiesAtHome" class="text-danger"></span>
            </div>


            <div class="col-12 col-md-4">
                <label asp-for="ExpenseDetail.ClothingGrooming"></label>
                <input asp-for="ExpenseDetail.ClothingGrooming" class="form-control income-expense-input amount-input" placeholder="0.00" maxlength="15" />
                <span asp-validation-for="ExpenseDetail.ClothingGrooming" class="text-danger"></span>
            </div>

            <div class="col-12 col-md-4">
                <label asp-for="ExpenseDetail.VacationTravel"></label>
                <input asp-for="ExpenseDetail.VacationTravel" class="form-control income-expense-input amount-input" placeholder="0.00" maxlength="15" />
                <span asp-validation-for="ExpenseDetail.VacationTravel" class="text-danger"></span>
            </div>


            <div class="col-12 col-md-4">
                <label asp-for="ExpenseDetail.Festivals"></label>
                <input asp-for="ExpenseDetail.Festivals" class="form-control income-expense-input amount-input" placeholder="0.00" maxlength="15" />
                <span asp-validation-for="ExpenseDetail.Festivals" class="text-danger"></span>
            </div>


            <div class="col-12 col-md-4">
                <label asp-for="ExpenseDetail.KidsBirthdays"></label>
                <input asp-for="ExpenseDetail.KidsBirthdays" class="form-control income-expense-input amount-input" placeholder="0.00" maxlength="15" />
                <span asp-validation-for="ExpenseDetail.KidsBirthdays" class="text-danger"></span>
            </div>


            <div class="col-12 col-md-4">
                <label asp-for="ExpenseDetail.FamilyFunctions"></label>
                <input asp-for="ExpenseDetail.FamilyFunctions" class="form-control income-expense-input amount-input" placeholder="0.00" maxlength="15" />
                <span asp-validation-for="ExpenseDetail.FamilyFunctions" class="text-danger"></span>
            </div>



            <div class="col-12 col-md-4">
                <label asp-for="ExpenseDetail.Medical"></label>
                <input asp-for="ExpenseDetail.Medical" class="form-control income-expense-input amount-input" placeholder="0.00" maxlength="15" />
                <span asp-validation-for="ExpenseDetail.Medical" class="text-danger"></span>
            </div>



            <!-- other Entertainment Expenses -->
            @if (entertainmentExpenses.Any())
            {

                @for (int i = 0; i < entertainmentExpenses.Count; i++)
                {
                    <div class="col-12 col-md-4">
                        <span class="form-label gap-1 d-flex">@entertainmentExpenses[i].FieldName (@entertainmentExpenses[i].Section / @entertainmentExpenses[i].Type) </span>
                        <div class="textbox-style">
                            @FormatINR(decimal.TryParse(entertainmentExpenses[i].FieldValue, out var v) ? v : 0)
                        </div>
                    </div>
                }
            }
        </div>



        <hr />


        <legend style="color: #3B3737" class="fw-bold">🔄 New / Replacement Item Expenses(Annual)</legend>
        <div class="row g-3" style="color:	#006400">
            <div class="col-12 col-md-4">
                <label asp-for="ExpenseDetail.VehicleServicing"></label>
                <input asp-for="ExpenseDetail.VehicleServicing" class="form-control income-expense-annual-input amount-input" placeholder="0.00" maxlength="15" />
                <span asp-validation-for="ExpenseDetail.VehicleServicing" class="text-danger"></span>
            </div>
            <div class="col-12 col-md-4">
                <label asp-for="ExpenseDetail.HomeRepair"></label>
                <input asp-for="ExpenseDetail.HomeRepair" class="form-control income-expense-annual-input amount-input" placeholder="0.00" maxlength="15" />
                <span asp-validation-for="ExpenseDetail.HomeRepair" class="text-danger"></span>
            </div>


            <div class="col-12 col-md-4">
                <label asp-for="ExpenseDetail.NewHomeAppliances"></label>
                <input asp-for="ExpenseDetail.NewHomeAppliances" class="form-control income-expense-annual-input amount-input" placeholder="0.00" maxlength="15" />
                <span asp-validation-for="ExpenseDetail.NewHomeAppliances" class="text-danger"></span>
            </div>




            <!-- other Replacement Expenses -->
            @if (newReplacementExpenses.Any())
            {

                @for (int i = 0; i < newReplacementExpenses.Count; i++)
                {
                    <div class="col-12 col-md-4">
                        <span class="form-label gap-1 d-flex">@newReplacementExpenses[i].FieldName (@newReplacementExpenses[i].Section / @newReplacementExpenses[i].Type) </span>
                        <div class="textbox-style">
                            @FormatINR(decimal.TryParse(newReplacementExpenses[i].FieldValue, out var v) ? v : 0)
                        </div>
                    </div>
                }
            }



        </div>
        <hr />


        <legend style="color: #3B3737" class="fw-bold">🛡️ Insurance Expenses(Annual)</legend>
        <div class="row g-3" style="color:	#006400">

            <div class="col-12 col-md-4">
                <label asp-for="ExpenseDetail.LifeInsurance"></label>
                <input asp-for="ExpenseDetail.LifeInsurance" class="form-control income-expense-annual-input amount-input" placeholder="0.00" maxlength="15" />
                <span asp-validation-for="ExpenseDetail.LifeInsurance" class="text-danger"></span>
            </div>


            <div class="col-12 col-md-4">
                <label asp-for="ExpenseDetail.HomeInsurance"></label>
                <input asp-for="ExpenseDetail.HomeInsurance" class="form-control income-expense-annual-input amount-input" placeholder="0.00" maxlength="15" />
                <span asp-validation-for="ExpenseDetail.HomeInsurance" class="text-danger"></span>
            </div>


            <div class="col-12 col-md-4">
                <label asp-for="ExpenseDetail.MedicalInsurance"></label>
                <input asp-for="ExpenseDetail.MedicalInsurance" class="form-control income-expense-annual-input amount-input" placeholder="0.00" maxlength="15" />
                <span asp-validation-for="ExpenseDetail.MedicalInsurance" class="text-danger"></span>
            </div>


            <div class="col-12 col-md-4">
                <label asp-for="ExpenseDetail.CarInsurance"></label>
                <input asp-for="ExpenseDetail.CarInsurance" class="form-control income-expense-annual-input amount-input" placeholder="0.00" maxlength="15" />
                <span asp-validation-for="ExpenseDetail.CarInsurance" class="text-danger"></span>
            </div>



            <!-- other Replacement Expenses -->
            @if (insuranceExpenses.Any())
            {

                @for (int i = 0; i < insuranceExpenses.Count; i++)
                {
                    <div class="col-12 col-md-4">
                        <span class="form-label gap-1 d-flex">@insuranceExpenses[i].FieldName (@insuranceExpenses[i].Section / @insuranceExpenses[i].Type) </span>
                        <div class="textbox-style">
                            @FormatINR(decimal.TryParse(insuranceExpenses[i].FieldValue, out var v) ? v : 0)
                        </div>
                    </div>
                }
            }
        </div>

        <hr />

        <legend class="d-flex justify-content-between align-items-center fw-bold" style="color: #3B3737">
            📝 Other Expense(Annual)
        </legend>
        <div class="row g-3" style="color:	#006400">

            <div class="col-12 col-md-4">
                <label asp-for="ExpenseDetail.FeeToCa"></label>
                <input asp-for="ExpenseDetail.FeeToCa" class="form-control income-expense-annual-input amount-input" placeholder="0.00" maxlength="15" />
                <span asp-validation-for="ExpenseDetail.FeeToCa" class="text-danger"></span>
            </div>



            <div class="col-12 col-md-4">
                <label asp-for="ExpenseDetail.OtherConsultant"></label>
                <input asp-for="ExpenseDetail.OtherConsultant" class="form-control income-expense-annual-input amount-input" placeholder="0.00" maxlength="15" />
                <span asp-validation-for="ExpenseDetail.OtherConsultant" class="text-danger"></span>
            </div>


            <div class="col-12 col-md-4">
                <label asp-for="ExpenseDetail.Donations"></label>
                <input asp-for="ExpenseDetail.Donations" class="form-control income-expense-annual-input amount-input" placeholder="0.00" maxlength="15" />
                <span asp-validation-for="ExpenseDetail.Donations" class="text-danger"></span>
            </div>

        </div>
        <legend class="mt-5 d-flex justify-content-between align-items-center fw-bold" style="color: #3B3737">
            <h5> Total Expense</h5>
        </legend>
        <div class="row g-3" style="color:	#006400">
            <div class="col-12 col-md-4">
                <span id="incomeExpenseMonthlyTotal" class="fw-bold text-success me-3"></span>
            </div>
            <div class="col-12 col-md-4">

                <span id="incomeExpenseMonthlyTotalAnnual" class="fw-bold text-primary me-3"></span>
            </div>
            <div class="col-12 col-md-4">

                <span id="incomeExpenseAnnualTotalOnly" class="fw-bold text-danger"></span>
            </div>


        </div>
        <div class="row g-3" style="color:	#006400">
            <div class="col-12 col-md-6">

                <span id="incomeExpenseGrandTotal" class="fw-bold text-dark"></span>
            </div>
            <div class="col-12 col-md-6 text-end">

                <span id="incomeExpenseAvgMonthlyTotal" class="fw-bold text-primary"></span>
            </div>
        </div>
        <hr />
        <div class="card shadow-sm rounded-3">
            <div class="card-header bg-primary text-white d-flex align-items-center justify-content-between">
                <h5 class="mb-0 d-flex align-items-center">
                    <i class="fas fa-hand-holding-usd me-2"></i>Edited data will be saved after click on SUBMIT button
                </h5>
                <button type="button" id="addExpenseNewContainer" class="btn btn-outline-light btn-sm btn-white-background">+ Add New</button>
            </div>
            <div id="expenseNewSection" class="card-body">
                <div id="expenseNewContainer">

                    <!-- Column Headers -->
                    <div class="row fw-bold text-dark align-items-center p-2 mb-1 d-none d-md-flex">
                        <div class="col-sm text-left">Other Expense Name</div>
                        <div class="col-sm text-left">Amount</div>
                        <div class="col-sm text-left">Expense Category</div>
                        <div class="col-sm text-left">(Monthly/Annual)</div>
                        <div class="col-md-auto text-end">Action</div>
                    </div>

                    @if (Model.ExpenseNew != null && Model.ExpenseNew.Any())
                    {
                        for (int i = 0; i < Model.ExpenseNew.Count; i++)
                        {
                            <div class="row g-2 align-items-center p-2 mb-1 expense-new justify-content-between">
                                <div class="col-sm">
                                    <span class="d-block d-md-none fw-bold text-dark mb-1">Other Expense Name</span>
                                    @Html.TextBoxFor(m => m.ExpenseNew[i].FieldName, new { @class = "form-control", placeholder = "Name" })
                                    @Html.ValidationMessageFor(m => m.ExpenseNew[i].FieldName, "", new { @class = "text-danger" })
                                </div>

                                <div class="col-sm">
                                    <span class="d-block d-md-none fw-bold text-dark mb-1">Amount </span>
                                    @{
                                        var inputClass = "form-control amount-input " +
                                        (Model.ExpenseNew[i].Type == "Monthly" ? "income-expense-input" : "income-expense-annual-input");
                                    }
                                    @Html.TextBoxFor(m => m.ExpenseNew[i].FieldValue, new { @class = inputClass, type = "text", placeholder = "0.00" })
                                    @Html.ValidationMessageFor(m => m.ExpenseNew[i].FieldValue, "", new { @class = "text-danger" })

                                </div>

                                <div class="col-sm">
                                    <span class="d-block d-md-none fw-bold text-dark mb-1">Expense Category</span>
                                    @Html.DropDownListFor(m => m.ExpenseNew[i].Section,
                                    new SelectList(new[] {
                                                        "Home", "Conveyance", "Communication", "Utilities", "Education",
                                                        "Entertainment", "Recreation", "Replacement Item", "Insurance"
                                                        }),
                                                        "Select",
                                                        new { @class = "form-select", required = "required" })
                            @Html.ValidationMessageFor(m => m.ExpenseNew[i].Section, "", new { @class = "text-danger" })
                        </div>

                        <div class="col-sm">
                            <span class="d-block d-md-none fw-bold text-dark mb-1">(Monthly/Annual)</span>
                            @Html.DropDownListFor(m => m.ExpenseNew[i].Type,
                                                        new SelectList(new[] { "Monthly", "Annual" }),
                                                        "Select",
                                                        new { @class = "form-select", required = "required" })
                            @Html.ValidationMessageFor(m => m.ExpenseNew[i].Type, "", new { @class = "text-danger" })
                        </div>

                        <div class="col-md-auto col-sm-12 text-center">
                            <span class="d-block d-md-none fw-bold text-dark mb-1">Action</span>
                            <button type="button" class="btn btn-danger btn-sm delete-expense-new" title="Remove">&times;</button>
                        </div>

                    </div>
                                        }
                                        }

                </div>
            </div>
        </div>

    </fieldset>
    <!--3. Saving -->
    @*    <fieldset style="background-color: #e8f5e9; border: 2px solid #006400; padding: 1.5rem; border-radius: 0.5rem;"> *@
    <fieldset class="d-flex flex-column gap-2 fieldset-green">
        <legend class="d-flex justify-content-between align-items-center fw-bold" style="color: #3B3737;">
            💸 3.1.3 Savings
            <button type="button" id="addNewSaving" class="btn btn-success">+ Add New</button>
        </legend>
        <div class="row g-3 d-none" style="color #006400">
            <div class="col-12 col-md-4">
                <label asp-for="Savings.TotalCommittedSavings"></label>
                <input asp-for="Savings.TotalCommittedSavings" class="form-control" placeholder="Name" />
                <span asp-validation-for="Savings.TotalCommittedSavings" class="text-danger"></span>
                <input asp-for="Savings.Id" type="hidden" />

            </div>
            <div class="col-12 col-md-4"> </div>
            <div class="col-12 col-md-4"> </div>
        </div>

        <div class="row g-3" style="color:#006400">
            <div class="col-12 col-md-2">
                <span class="d-block  fw-bold text-dark mb-1 text-nowrap"> Saving Name </span>
                @*  <select asp-for="CommittedSaving.Name" class="form-select">
                    <option value="">Select</option>
                    <option value="RD">RD</option>
                    <option value="FD">FD</option>
                </select> *@
                <input asp-for="CommittedSaving.Name" class="form-control amount-input" placeholder="Name" maxlength="15" />
                <span asp-validation-for="CommittedSaving.Name" class="text-danger"></span>
            </div>
            <div class="col-12 col-md-2">
                <span class="d-block  fw-bold text-dark mb-1 text-nowrap"> Current Value </span>
                <input asp-for="CommittedSaving.CurrentValue" class="form-control amount-input" placeholder="0.00" maxlength="15" />
                <span asp-validation-for="CommittedSaving.CurrentValue" class="text-danger"></span>
            </div>

            <div class="col-12 col-md-2">
                <span class="d-block  fw-bold text-dark mb-1 text-nowrap"> Monthly Contribution </span>
                <input asp-for="CommittedSaving.MonthlyContribution" class="form-control amount-input" placeholder="0.00" maxlength="15" />
                <span asp-validation-for="CommittedSaving.MonthlyContribution" class="text-danger"></span>
            </div>
            <div class="col-12 col-md-2">
                <span class="d-block  fw-bold text-dark mb-1 text-nowrap"> Till When 📅 </span>

                <input asp-for="CommittedSaving.TillWhen" class="form-control datepicker" />
                <span asp-validation-for="CommittedSaving.TillWhen" class="text-danger" placeholder="dd/MM/yyyy"></span>
            </div>
            <div class="col-12 col-md-2">

                <span class="d-block  fw-bold text-dark mb-1 text-nowrap"> Follow Up </span>
                <select asp-for="CommittedSaving.FollowUp" class="form-select">
                    <option value="">Select</option>
                    <option value="true">Yes</option>
                    <option value="false">No</option>
                </select>
                <span asp-validation-for="CommittedSaving.FollowUp" class="text-danger"></span>
            </div>
            <div class="col-12 col-md-2">
            </div>
        </div>
        <hr />
        <div id="savingNewSection">
            <div id="newSavingsContainer">
                @if (Model.NewSavings != null && Model.NewSavings.Any())
                {
                    for (int i = 0; i < Model.NewSavings.Count; i++)
                    {
                        <div class="saving-entry mb-3 row g-2 align-items-center">
                            <div class="col-md-2">
                                <span class="d-block d-md-none fw-bold text-dark mb-1"> Saving Name</span>
                                @Html.TextBoxFor(m => m.NewSavings[i].Name, new { @class = "form-control", type = "text", placeholder = "Name" })

                                @Html.ValidationMessageFor(m => m.NewSavings[i].Name, "", new { @class = "text-danger" })

                            </div>
                            <div class="col-md-2">
                                <span class="d-block d-md-none fw-bold text-dark mb-1"> Current Value</span>
                                @Html.TextBoxFor(m => m.NewSavings[i].CurrentValue, new { @class = "form-control amount-input", type = "text", placeholder = "Current Value" })
                                @Html.ValidationMessageFor(m => m.NewSavings[i].CurrentValue, "", new { @class = "text-danger" })

                            </div>
                            <div class="col-md-2">
                                <span class="d-block d-md-none fw-bold text-dark mb-1"> Monthly Contribution</span>
                                @Html.TextBoxFor(m => m.NewSavings[i].MonthlyContribution, new { @class = "form-control", type = "number", placeholder = "Monthly Contribution" })
                                @Html.ValidationMessageFor(m => m.NewSavings[i].MonthlyContribution, "", new { @class = "text-danger" })

                            </div>

                            <div class="col-md-2">
                                <span class="d-block d-md-none fw-bold text-dark mb-1"> Till When 📅</span>
                                @Html.TextBox($"NewSavings[{i}].TillWhen",
                                Model.NewSavings[i].TillWhen?.ToString("dd/MM/yyyy"),
                                                new { @class = "form-control datepicker", placeholder = "dd/MM/yyyy", required = "required" })

                        @Html.ValidationMessageFor(m => m.NewSavings[i].TillWhen, "", new { @class = "text-danger" })


                    </div>
                    <div class="col-md-2">
                        <span class="d-block d-md-none fw-bold text-dark mb-1"> Follow Up </span>
                        @Html.DropDownListFor(m => m.NewSavings[i].FollowUp,
                                                new List<SelectListItem>
                                                {
                                                new SelectListItem { Text = "Yes", Value = "true" },
                                                new SelectListItem { Text = "No", Value = "false" }
                                                },
                                                "Select",
                                                new { @class = "form-select", required = "required" })
                        @Html.ValidationMessageFor(m => m.NewSavings[i].FollowUp, "", new { @class = "text-danger" })

                    </div>
                    <div class="col-12 col-md-2">
                        <span class="d-block d-md-none fw-bold text-dark mb-1"> Action</span>
                        <button type="button" class="btn btn-danger btn-sm delete-saving-entry" title="Remove">&times;</button>
                    </div>
                </div>
                                }
                                }

            </div>
        </div>
    </fieldset>
    <!--4. Manage EMI -->
    <fieldset class="d-flex flex-column gap-2 fieldset-blue">
        <legend class="d-flex justify-content-between align-items-center fw-bold" style="color: #3B3737;">
            💳 Manage EMI
        </legend>
        <div class="card shadow-sm rounded-3">
            <div class="card-header bg-primary text-white d-flex align-items-center justify-content-between">
                <h5 class="mb-0 d-flex align-items-center">
                    <i class="fas fa-hand-holding-usd me-2"></i>Edited data will be saved after click on SUBMIT button
                </h5>
                <button type="button" id="addNewEmi" class="btn btn-outline-light btn-sm btn-white-background">+ Add New</button>
            </div>
            <div id="EmiSection" class="card-body">
                <div id="newEmiSectionContainer">
                    <!-- Desktop Header Row: hidden on mobile -->
                    <div class="row fw-bold text-dark align-items-center p-2 mb-1 d-none d-md-flex">
                        <div class="col-sm text-center">EMI Type</div>
                        <div class="col-sm text-center">EMI Monthly</div>
                        <div class="col-sm text-center">Interest Component</div>
                        <div class="col-sm text-center">Principal Component</div>
                        <div class="col-sm text-center">Outstanding Principal</div>
                        <div class="col-sm text-center">Till When</div>
                        <div class="col-sm text-center">FollowUp</div>
                        <div class="col-md-auto text-end">Action</div>
                    </div>

                    @if (Model.EmiDetail != null && Model.EmiDetail.Any())
                    {

                        @for (int i = 0; i < Model.EmiDetail.Count; i++)
                        {
                            <div class="row g-2 align-items-center p-2 mb-1 saving-emi-entry justify-content-between">
                                <div class="col-sm">
                                    <span class="d-block d-md-none fw-bold text-dark mb-2">EMI   Type</span>
                                    @if (i <= 4)
                                    {
                                        @Html.TextBoxFor(m => m.EmiDetail[i].Name, new { @class = "form-control emi-type-input", placeholder = "EMI Type", @readonly = "readonly" })
                                    }
                                    else
                                    {
                                        @Html.TextBoxFor(m => m.EmiDetail[i].Name, new { @class = "form-control emi-type-input", placeholder = "EMI Type" })
                                    }
                                    @* @Html.DropDownListFor(m => m.EmiDetail[i].Name,
                                             new SelectList(new[]
                                             {
                                                 new { Value = "", Text = "Select" },
                                                 new { Value = "Home 1 Loan", Text = "Home 1 Loan" },
                                                 new { Value = "Home 2 Loan", Text = "Home 2 Loan" },
                                                 new { Value = "Land Loan", Text = "Land Loan" },
                                                 new { Value = "Car Loan", Text = "Car Loan" },
                                                 new { Value = "Education Loan", Text = "Education Loan" },
                                                 new { Value = "Commercial Property Loan", Text = "Commercial Property Loan" },
                                                 new { Value = "Business Loan in case of Sole Proprietor", Text = "Business Loan in case of Sole Proprietor" },
                                                 new { Value = "Jewellery Loan", Text = "Jewellery Loan" },
                                                 new { Value = "Other Loan", Text = "Other Loan" }
                                                 }, "Value", "Text", Model.EmiDetail[i].Name),
                                             new { @class = "form-select emi-type-input" }
                                             ) *@
                                </div>
                                <div class="col-sm">
                                    <span class="d-block d-md-none fw-bold text-dark mb-2">   EMI Monthly</span>
                                    @Html.TextBoxFor(m => m.EmiDetail[i].Monthly, new { @class = "form-control emi-type-input amount-input", placeholder = "0.00" })
                                    @Html.ValidationMessageFor(m => m.EmiDetail[i].Monthly, "", new { @class = "text-danger small" })
                                </div>
                                <div class="col-sm">
                                    <span class="d-block d-md-none fw-bold text-dark mb-1 text-start text-md-center">Interest Component</span>
                                    @Html.TextBoxFor(m => m.EmiDetail[i].Interest, new { @class = "form-control emi-type-input amount-input", placeholder = "0" })
                                    @Html.ValidationMessageFor(m => m.EmiDetail[i].Interest, "", new { @class = "text-danger small" })
                                </div>
                                <div class="col-sm">
                                    <span class="d-block d-md-none fw-bold text-dark mb-1 text-start text-md-center"> Principal Component</span>
                                    @Html.TextBoxFor(m => m.EmiDetail[i].Principal, new { @class = "form-control emi-type-input amount-input", placeholder = "0.00" })
                                    @Html.ValidationMessageFor(m => m.EmiDetail[i].Principal, "", new { @class = "text-danger small" })
                                </div>
                                <div class="col-sm">
                                    <span class="d-block d-md-none fw-bold text-dark mb-1">  Outstanding Principal</span>
                                    @Html.TextBoxFor(m => m.EmiDetail[i].Outstanding, new { @class = "form-control emi-type-input amount-input", placeholder = "0.00" })
                                    @Html.ValidationMessageFor(m => m.EmiDetail[i].Outstanding, "", new { @class = "text-danger small" })
                                </div>

                                <div class="col-sm">
                                    <span class="d-block d-md-none fw-bold text-dark mb-1"> Till  When</span>
                                    @Html.TextBox($"EmiDetail[{i}].Till",
                                    Model.EmiDetail[i].Till?.ToString("dd/MM/yyyy"),
                                                        new { @class = "form-control  datepicker", placeholder = "dd/MM/yyyy", required = "required" })
                            @Html.ValidationMessageFor(m => m.EmiDetail[i].Till, "", new { @class = "text-danger small" })
                        </div>

                        <div class="col-sm">
                            <div class="d-flex flex-column align-items-start align-items-md-end w-100">
                                <span class="fw-bold text-dark mb-1 d-block d-md-none">FollowUp</span>

                                @Html.DropDownListFor(m => m.EmiDetail[i].FollowUp,
                                                                new List<SelectListItem>
                                                                {
                                                                new SelectListItem { Text = "Yes", Value = "true" },
                                                                new SelectListItem { Text = "No", Value = "false" }
                                                                },
                                                                "Select",
                                                                new { @class = "form-select", required = "required" })

                                @Html.ValidationMessageFor(m => m.EmiDetail[i].FollowUp, "", new { @class = "text-danger small" })
                            </div>
                        </div>

                        <div class="col-md-auto col-sm-12 text-center">

                            @if (i > 4)
                                {
                                    <span class="d-block d-md-none fw-bold text-dark mb-1">Action</span>
                                    <button type="button" class="btn btn-danger btn-sm delete-emi-entry" title="Remove"> &times; </button>
                                }
                            </div>


                        </div>

                        @* Floating delete button after 5th *@




                    }
                                        }

                </div>
            </div>
        </div>
        <hr />
        <div class="row g-3" style="color: #006400">
            <div class="col-12 col-md-6 d-none">
                <label asp-for="EmiOneTimeLoanRepayment.NetCashflows" class="form-label fw-semibold"></label>
                <input asp-for="EmiOneTimeLoanRepayment.NetCashflows" class="form-control" placeholder="0.00" maxlength="15" />
                <span asp-validation-for="EmiOneTimeLoanRepayment.NetCashflows" class="text-danger small"></span>
            </div>

            <div class="col-12 col-md-6 d-none">
                <label asp-for="EmiOneTimeLoanRepayment.TotalEmi" class="form-label fw-semibold"></label>
                <input asp-for="EmiOneTimeLoanRepayment.TotalEmi" class="form-control" placeholder="0.00" maxlength="15" />
                <span asp-validation-for="EmiOneTimeLoanRepayment.TotalEmi" class="text-danger small"></span>
            </div>


        </div>
        <div class="row g-3" style="color: #006400">

            <div class="col-12 col-md-6 text-md-end">
                <span class="fw-bold text-success d-block mb-2">
                    @Html.DisplayNameFor(m => m.EmiOneTimeLoanRepayment.OneTimeLoanRepayment)
                </span>
            </div>

            <div class="col-12 col-md-6 text-md-start">
                <input asp-for="EmiOneTimeLoanRepayment.OneTimeLoanRepayment"
                       class="form-control  amount-input"
                       style="max-width: 250px;"
                       placeholder="0.00" maxlength="15" />

                <span asp-validation-for="EmiOneTimeLoanRepayment.OneTimeLoanRepayment" class="text-danger small d-block mt-1"></span>
            </div>



        </div>


    </fieldset>

    <!--5. Manage Suggested Modified Budget  -->
    <fieldset class="d-flex flex-column gap-2 fieldset-green">
        <legend class="d-flex justify-content-between align-items-center fw-bold" style="color: #3B3737;">
            💸 3.2 Suggested Modified Budget

        </legend>
        <div class="card-body" style="color: #006400;">
            <div class="row g-3 d-none">
                <div class="col-12 col-md-4">
                    <label asp-for="postIncomeDetailsViewModel.PostIncome" class="form-label fw-semibold"></label>
                    <input asp-for="postIncomeDetailsViewModel.PostIncome" maxlength="10" class="form-control" placeholder="%" />




                    <span asp-validation-for="postIncomeDetailsViewModel.PostIncome" class="text-danger small"></span>
                </div>
                <div class="col-12 col-md-4"></div>
                <div class="col-12 col-md-4"></div>
                <div class="col-12 col-md-4"></div>
            </div>
            <div class="row g-3">
                <div class="col-12 col-md-4">
                    <label asp-for="postIncomeDetailsViewModel.MustHaveExpensesPercent" class="form-label fw-semibold"></label>
                    <input asp-for="postIncomeDetailsViewModel.MustHaveExpensesPercent" maxlength="6" class="form-control" id="mustHavePercent" placeholder="%" />
                    <span asp-validation-for="postIncomeDetailsViewModel.MustHaveExpensesPercent" class="text-danger small"></span>
                </div>
                <div class="col-12 col-md-4">
                    <label asp-for="postIncomeDetailsViewModel.OptionalExpensesPercent" class="form-label fw-semibold"></label>
                    <input asp-for="postIncomeDetailsViewModel.OptionalExpensesPercent" maxlength="6" class="form-control" id="optionalPercent" placeholder="%" />
                    <span asp-validation-for="postIncomeDetailsViewModel.OptionalExpensesPercent" class="text-danger small"></span>
                </div>
                <div class="col-12 col-md-4">
                    <label asp-for="postIncomeDetailsViewModel.SavingsPercent" class="form-label fw-semibold"></label>
                    <input asp-for="postIncomeDetailsViewModel.SavingsPercent" maxlength="6" class="form-control" id="savingsPercent" placeholder="%" />
                    <span asp-validation-for="postIncomeDetailsViewModel.SavingsPercent" class="text-danger small"></span>
                </div>

            </div>
            <div class="row g-3">

                <div class="col-12 col-md-4"></div>
                <div class="col-12 col-md-4"></div>
                <div class="col-12 col-md-4 d-flex justify-content-end align-items-center">
                    <label class="form-label fw-bold mb-0 me-2">Total Percent:</label>
                    <div id="totalPercent" class="fw-semibold fw-bold">0.00%</div>
                </div>
            </div>

            <div class="row g-3">
                <div class="col-12 col-md-4">
                    <label asp-for="postIncomeDetailsViewModel.ProjectedGrowthRateNext5Years" class="form-label fw-semibold"></label>
                    <input asp-for="postIncomeDetailsViewModel.ProjectedGrowthRateNext5Years" maxlength="7" class="form-control" placeholder="%" />
                    <span asp-validation-for="postIncomeDetailsViewModel.ProjectedGrowthRateNext5Years" class="text-danger small"></span>
                </div>
                <div class="col-12 col-md-4">
                    <label asp-for="postIncomeDetailsViewModel.ProjectedGrowthRate6To10Years" class="form-label fw-semibold"></label>
                    <input asp-for="postIncomeDetailsViewModel.ProjectedGrowthRate6To10Years" maxlength="7" class="form-control" placeholder="%" />
                    <span asp-validation-for="postIncomeDetailsViewModel.ProjectedGrowthRate6To10Years" class="text-danger small"></span>
                </div>
                <div class="col-12 col-md-4">
                    <label asp-for="postIncomeDetailsViewModel.InflationRate" class="form-label fw-semibold"></label>
                    <input asp-for="postIncomeDetailsViewModel.InflationRate" maxlength="7" class="form-control" placeholder="%" />
                    <span asp-validation-for="postIncomeDetailsViewModel.InflationRate" class="text-danger small"></span>
                </div>

            </div>

        </div>

    </fieldset>

    <!--6. Manage Net Worth  -->
    <fieldset class="d-flex flex-column gap-2 fieldset-blue">
        <legend style="color: #3B3737" class="fw-bold">
            💸 3.3 Net Worth

        </legend>
        <legend class="d-flex justify-content-between align-items-center fw-bold" style="color: #3B3737;">
            Investments

        </legend>

        <div class="card-body" style="color: #006400;">
            <div class="row g-3">
                <!-- Hidden NetWorthId if needed -->
                <input type="hidden" asp-for="netWorthViewModel.NetWorthId" />

                <input type="hidden" asp-for="netWorthViewModel.ProfileId" />



                <!-- CashInHand -->
                <div class="col-12 col-md-4">
                    <label asp-for="netWorthViewModel.CashInHand" class="form-label fw-semibold"></label>
                    <input asp-for="netWorthViewModel.CashInHand" class="form-control amount-input" placeholder="0.00" maxlength="15" />
                    <span asp-validation-for="netWorthViewModel.CashInHand" class="text-danger small"></span>
                </div>

                <!-- Employee Provident Fund -->
                <div class="col-12 col-md-4">
                    <label asp-for="netWorthViewModel.EmployeeProvidendFund" class="form-label fw-semibold"></label>
                    <input asp-for="netWorthViewModel.EmployeeProvidendFund" class="form-control amount-input" placeholder="0.00" maxlength="15" />
                    <span asp-validation-for="netWorthViewModel.EmployeeProvidendFund" class="text-danger small"></span>
                </div>

                <!-- PPF -->
                <div class="col-12 col-md-4">
                    <label asp-for="netWorthViewModel.PPF" class="form-label fw-semibold"></label>
                    <input asp-for="netWorthViewModel.PPF" class="form-control amount-input" placeholder="0.00" maxlength="15" />
                    <span asp-validation-for="netWorthViewModel.PPF" class="text-danger small"></span>
                </div>

                <!-- Fixed Deposits -->
                <div class="col-12 col-md-4">
                    <label asp-for="netWorthViewModel.FixedDeposits" class="form-label fw-semibold"></label>
                    <input asp-for="netWorthViewModel.FixedDeposits" class="form-control amount-input" placeholder="0.00" maxlength="15" />
                    <span asp-validation-for="netWorthViewModel.FixedDeposits" class="text-danger small"></span>
                </div>

                <!-- Mutual Funds / Shares -->
                <div class="col-12 col-md-4">
                    <label asp-for="netWorthViewModel.MutualFundsShares" class="form-label fw-semibold"></label>
                    <input asp-for="netWorthViewModel.MutualFundsShares" class="form-control amount-input" placeholder="0.00" maxlength="15" />
                    <span asp-validation-for="netWorthViewModel.MutualFundsShares" class="text-danger small"></span>
                </div>

                <!-- Paid-Up Insurance Policies -->
                <div class="col-12 col-md-4">
                    <label asp-for="netWorthViewModel.PaidUpValueOfInsurancePolicies" class="form-label fw-semibold"></label>
                    <input asp-for="netWorthViewModel.PaidUpValueOfInsurancePolicies" class="form-control amount-input" placeholder="0.00" maxlength="15" />
                    <span asp-validation-for="netWorthViewModel.PaidUpValueOfInsurancePolicies" class="text-danger small"></span>
                </div>

                <!-- Other Gratuity -->
                <div class="col-12 col-md-4">
                    <label class="form-label fw-semibold">Others (e.g. Gratuity)</label>
                    <input asp-for="netWorthViewModel.OthersGratuity" class="form-control amount-input" placeholder="0.00" maxlength="15" />
                    <span asp-validation-for="netWorthViewModel.OthersGratuity" class="text-danger small"></span>
                </div>
                @if (Model.NewInvestments != null && Model.NewInvestments.Any())
                {
                    @for (int i = 0; i < Model.NewInvestments.Count; i++)
                    {
                        <div class="col-12 col-md-4">
                            <span class="form-label gap-1 d-flex"> @Model.NewInvestments[i].InvestmentName</span>
                            <div class="textbox-style">
                                @Model.NewInvestments[i].Amount.FormatDecimal()

                            </div>
                        </div>
                    }

                }


            </div>
            <hr />
            <div class="card shadow-sm rounded-3">
                <div class="card-header bg-primary text-white d-flex align-items-center justify-content-between">
                    <h5 class="mb-0 d-flex align-items-center">
                        <i class="fas fa-hand-holding-usd me-2"></i>
                        Edited data will be saved after click on SUBMIT button
                    </h5>
                    <button type="button" id="addNewInvestment" class="btn btn-outline-light btn-sm btn-white-background">+ Add New</button>
                </div>
                <div id="addNewInvestmentSection" class="card-body">
                    <div id="addNewInvestmentContainer">

                        <!-- Desktop Header Row: hidden on mobile -->
                        <div class="row fw-bold text-dark align-items-center p-2 mb-1 d-none d-md-flex">
                            <!-- Investment Name -->
                            <div class="col-sm text-left">
                                Investment Name
                            </div>

                            <!-- Amount -->
                            <div class="col-sm text-left">
                                Amount
                            </div>

                            <!-- Remove Button -->
                            <div class="col-md-auto text-end">
                                Action
                            </div>
                        </div>

                        @if (Model.NewInvestments != null && Model.NewInvestments.Any())
                        {
                            @for (int i = 0; i < Model.NewInvestments.Count; i++)
                            {

                                <div class="row g-2 align-items-center p-2 mb-1 investment-new justify-content-between">
                                    <!-- Investment Name -->
                                    <div class="col-sm">
                                        <span class="d-block d-md-none fw-bold text-dark mb-1">Investment Name</span>
                                        <input asp-for="NewInvestments[i].InvestmentName" class="form-control" placeholder="Investment Name" required />
                                        <span asp-validation-for="NewInvestments[i].InvestmentName" class="text-danger small"></span>
                                    </div>

                                    <!-- Amount -->
                                    <div class="col-sm">
                                        <span class="d-block d-md-none fw-bold text-dark mb-1">Amount</span>
                                        <input asp-for="NewInvestments[i].Amount" class="form-control amount-input" placeholder="0.00" required maxlength="15" />
                                        <span asp-validation-for="NewInvestments[i].Amount" class="text-danger small"></span>
                                    </div>

                                    <!-- Remove Button -->
                                    <div class="col-md-auto col-sm-12 text-center">
                                        <span class="d-block d-md-none fw-bold text-dark mb-1">Action</span>
                                        <button type="button" class="btn btn-danger btn-sm delete-investment-new" title="Remove"> &times; </button>
                                    </div>

                                </div>
                            }
                        }
                    </div>
                </div>
            </div>

            <hr />

            <legend class="d-flex justify-content-between align-items-center fw-bold" style="color: #3B3737;">
                Other Assets

            </legend>

            <div class="row g-3">
                <!-- Home1 -->
                <div class="col-12 col-md-4">
                    <label asp-for="netWorthViewModel.Home1" class="form-label fw-semibold"></label>
                    <input asp-for="netWorthViewModel.Home1" class="form-control  amount-input" placeholder="0.00" maxlength="15" />
                    <span asp-validation-for="netWorthViewModel.Home1" class="text-danger small"></span>
                </div>

                <!-- Home2 -->
                <div class="col-12 col-md-4">
                    <label asp-for="netWorthViewModel.Home2" class="form-label fw-semibold"></label>
                    <input asp-for="netWorthViewModel.Home2" class="form-control  amount-input" placeholder="0.00" maxlength="15" />
                    <span asp-validation-for="netWorthViewModel.Home2" class="text-danger small"></span>
                </div>

                <!-- Land -->
                <div class="col-12 col-md-4">
                    <label asp-for="netWorthViewModel.Land" class="form-label fw-semibold"></label>
                    <input asp-for="netWorthViewModel.Land" class="form-control  amount-input" placeholder="0.00" maxlength="15" />
                    <span asp-validation-for="netWorthViewModel.Land" class="text-danger small"></span>
                </div>

                <!-- Car -->
                <div class="col-12 col-md-4">
                    <label asp-for="netWorthViewModel.Car" class="form-label fw-semibold"></label>
                    <input asp-for="netWorthViewModel.Car" class="form-control" placeholder="0.00" maxlength="15" />
                    <span asp-validation-for="netWorthViewModel.Car" class="text-danger small"></span>
                </div>

                <!-- Commercial Property -->
                <div class="col-12 col-md-4">
                    <label asp-for="netWorthViewModel.CommercialProperty" class="form-label fw-semibold"></label>
                    <input asp-for="netWorthViewModel.CommercialProperty" class="form-control  amount-input" placeholder="0.00" maxlength="15" />
                    <span asp-validation-for="netWorthViewModel.CommercialProperty" class="text-danger small"></span>
                </div>

                <!-- Jewellery -->
                <div class="col-12 col-md-4">
                    <label asp-for="netWorthViewModel.Jewellery" class="form-label fw-semibold"></label>
                    <input asp-for="netWorthViewModel.Jewellery" class="form-control  amount-input" placeholder="0.00" maxlength="15" />
                    <span asp-validation-for="netWorthViewModel.Jewellery" class="text-danger small"></span>
                </div>

                <!-- Value Of Business -->
                <div class="col-12 col-md-4">
                    <label asp-for="netWorthViewModel.ValueOfBusiness" class="form-label fw-semibold"></label>
                    <input asp-for="netWorthViewModel.ValueOfBusiness" class="form-control" placeholder="0.00" maxlength="15" />
                    <span asp-validation-for="netWorthViewModel.ValueOfBusiness" class="text-danger small"></span>
                </div>
                @if (Model.NewOtherAssets != null && Model.NewOtherAssets.Any())
                {
                    @for (int i = 0; i < Model.NewOtherAssets.Count; i++)
                    {
                        <div class="col-12 col-md-4">
                            <span class="form-label gap-1 d-flex"> @Model.NewOtherAssets[i].AssetName</span>
                            <div class="textbox-style">
                                @Model.NewOtherAssets[i].Amount.FormatDecimal()

                            </div>
                        </div>
                    }

                }
            </div>
            <hr />
            <div class="card shadow-sm rounded-3">
                <div class="card-header bg-primary text-white d-flex align-items-center justify-content-between">
                    <h5 class="mb-0 d-flex align-items-center">
                        <i class="fas fa-hand-holding-usd me-2"></i>
                        Edited data will be saved after click on SUBMIT button
                    </h5>
                    <button type="button" id="addNewOtherAssets" class="btn btn-outline-light btn-sm btn-white-background">+ Add New</button>
                </div>

                <div id="addNewOtherAssetsSection" class="card-body">
                    <div id="addNewOtherAssetsContainer">
                        <!-- Desktop Header Row: hidden on mobile -->
                        <div class="row fw-bold text-dark align-items-center p-2 mb-1 d-none d-md-flex">
                            <!-- Investment Name -->
                            <div class="col-sm text-left">
                                Other Assets Name
                            </div>

                            <!-- Amount -->
                            <div class="col-sm text-left">
                                Amount
                            </div>

                            <!-- Remove Button -->
                            <div class="col-md-auto text-end">
                                Action
                            </div>
                        </div>

                        @if (Model.NewOtherAssets != null && Model.NewOtherAssets.Any())
                        {
                            @for (int i = 0; i < Model.NewOtherAssets.Count; i++)
                            {

                                <div class="row g-2 align-items-center p-2 mb-1 other-assets-new justify-content-between">
                                    <!-- Asset Name -->
                                    <div class="col-sm">
                                        <span class="d-block d-md-none fw-bold text-dark mb-1">Other Asset Name</span>

                                        <input asp-for="NewOtherAssets[i].AssetName" class="form-control" placeholder="Asset Name" />
                                        <span asp-validation-for="NewOtherAssets[i].AssetName" class="text-danger small"></span>
                                    </div>

                                    <!-- Amount -->
                                    <div class="col-sm">
                                        <span class="d-block d-md-none fw-bold text-dark mb-1">Amount</span>
                                        <input asp-for="NewOtherAssets[i].Amount" class="form-control amount-input" placeholder="0.00" maxlength="15" />
                                        <span asp-validation-for="NewOtherAssets[i].Amount" class="text-danger small amount-input"></span>
                                    </div>

                                    <!-- Remove Button -->
                                    <div class="col-md-auto col-sm-12 text-center">
                                        <span class="d-block d-md-none fw-bold text-dark mb-1">Action</span>
                                        <button type="button" class="btn btn-danger btn-sm delete-otherAssets-new" title="Remove"> &times; </button>
                                    </div>
                                </div>

                            }
                        }
                    </div>
                </div>
            </div>
            <hr />
            <legend style="color: #3B3737" class="fw-bold">
            </legend>
            <legend class="d-flex justify-content-between align-items-center fw-bold" style="color: #3B3737;">
                Liabilities

            </legend>
            <div class="row g-3 d-none">
                <!-- Other Assets -->
                <div class="col-12 col-md-4">
                    <label asp-for="netWorthViewModel.OtherAssetsOther" class="form-label fw-semibold"></label> it is changed duering testing

                    <input asp-for="netWorthViewModel.OtherAssetsOther" class="form-control amount-input" placeholder="0.00" maxlength="15" readonly />
                    <span asp-validation-for="netWorthViewModel.OtherAssetsOther" class="text-danger small"></span>
                </div>

                <!-- Home2 Loan -->
                <div class="col-12 col-md-4">
                    <label asp-for="netWorthViewModel.Home2Loan" class="form-label fw-semibold"></label>
                    <input asp-for="netWorthViewModel.Home2Loan" class="form-control amount-input" placeholder="0.00" maxlength="15" />
                    <span asp-validation-for="netWorthViewModel.Home2Loan" class="text-danger small"></span>
                </div>

                <!-- Land Loan -->
                <div class="col-12 col-md-4">
                    <label asp-for="netWorthViewModel.LandLoan" class="form-label fw-semibold"></label>
                    <input asp-for="netWorthViewModel.LandLoan" class="form-control amount-input" placeholder="0.00" maxlength="15" />
                    <span asp-validation-for="netWorthViewModel.LandLoan" class="text-danger small"></span>
                </div>

                <!-- Commercial Property Loan -->
                <div class="col-12 col-md-4">
                    <label asp-for="netWorthViewModel.CommercialPropertyLoan" class="form-label fw-semibold"></label>
                    <input asp-for="netWorthViewModel.CommercialPropertyLoan" class="form-control amount-input" placeholder="0.00" maxlength="15" />
                    <span asp-validation-for="netWorthViewModel.CommercialPropertyLoan" class="text-danger small"></span>
                </div>

                <!-- Jewellery Loan -->
                <div class="col-12 col-md-4">
                    <label asp-for="netWorthViewModel.JewelleryLoan" class="form-label fw-semibold"></label>
                    <input asp-for="netWorthViewModel.JewelleryLoan" class="form-control amount-input" placeholder="0.00" maxlength="15" />
                    <span asp-validation-for="netWorthViewModel.JewelleryLoan" class="text-danger small"></span>
                </div>

                <!-- Business Loan -->
                <div class="col-12 col-md-4">
                    <label asp-for="netWorthViewModel.BusinessLoan" class="form-label fw-semibold"></label>
                    <input asp-for="netWorthViewModel.BusinessLoan" class="form-control amount-input" placeholder="0.00" maxlength="15" />
                    <span asp-validation-for="netWorthViewModel.BusinessLoan" class="text-danger small"></span>
                </div>

                <!-- Other Loan -->
                <div class="col-12 col-md-4">
                    <label asp-for="netWorthViewModel.OtherLoan" class="form-label fw-semibold"></label>
                    <input asp-for="netWorthViewModel.OtherLoan" class="form-control amount-input" placeholder="0.00" maxlength="15" />
                    <span asp-validation-for="netWorthViewModel.OtherLoan" class="text-danger small"></span>
                </div>
            </div>
            <div class="row g-3">

                @if (Model.EmiDetail != null && Model.EmiDetail.Any())
                {

                    @for (int i = 0; i < Model.EmiDetail.Count; i++)
                    {
                        @if (!string.IsNullOrEmpty(Model.EmiDetail[i].Name) && Model.EmiDetail[i].Name != "Select")
                        {
                            <div class="col-12 col-md-4">
                                <span class="form-label gap-1 d-flex">@Model.EmiDetail[i].Name</span>
                                <div class="textbox-style">
                                    @Model.EmiDetail[i].Outstanding.FormatDecimal()
                                </div>
                            </div>

                        }
                    }
                }

            </div>
            <hr />
            <div class="row g-3">
                @if (Model.NewLiabilities != null && Model.NewLiabilities.Any())
                {
                    @for (int i = 0; i < Model.NewLiabilities.Count; i++)
                    {
                        <div class="col-12 col-md-4">
                            <span class="form-label gap-1 d-flex"> @Model.NewLiabilities[i].LiabilityName</span>
                            <div class="textbox-style">
                                @Model.NewLiabilities[i].Amount.FormatDecimal()

                            </div>
                        </div>
                    }

                }
            </div>
            <hr />
            <div class="card shadow-sm rounded-3">
                <div class="card-header bg-primary text-white d-flex align-items-center justify-content-between">
                    <h5 class="mb-0 d-flex align-items-center">
                        <i class="fas fa-hand-holding-usd me-2"></i>
                        Edited data will be saved after click on SUBMIT button
                    </h5>
                    <button type="button" id="addNewLiabilities" class="btn btn-outline-light btn-sm btn-white-background">+ Add New</button>
                </div>

                <div id="addNewLiabilitiesSection" class="card-body">
                    <div id="addNewLiabilitiesContainer">
                        <!-- Desktop Header Row: hidden on mobile -->
                        <div class="row fw-bold text-dark align-items-center p-2 mb-1 d-none d-md-flex">
                            <!-- Investment Name -->
                            <div class="col-sm text-left">
                                Liability Name
                            </div>

                            <!-- Amount -->
                            <div class="col-sm text-left">
                                Amount
                            </div>

                            <!-- Remove Button -->
                            <div class="col-md-auto text-end">
                                Action
                            </div>
                        </div>

                        @if (Model.NewLiabilities != null && Model.NewLiabilities.Any())
                        {
                            @for (int i = 0; i < Model.NewLiabilities.Count; i++)
                            {

                                <div class="row g-2 align-items-center p-2 mb-1 liabilities-entry-new justify-content-between">
                                    <div class="col-sm">
                                        <span class="d-block d-md-none fw-bold text-dark mb-1">Liability Name</span>

                                        <input asp-for="NewLiabilities[i].LiabilityName" class="form-control" placeholder="Liability Name" />
                                        <span asp-validation-for="NewLiabilities[i].LiabilityName" class="text-danger small"></span>
                                    </div>

                                    <div class="col-sm">
                                        <span class="d-block d-md-none fw-bold text-dark mb-1">Amount</span>

                                        <input asp-for="NewLiabilities[i].Amount" class="form-control amount-input" placeholder="0.00" maxlength="15" />
                                        <span asp-validation-for="NewLiabilities[i].Amount" class="text-danger small"></span>
                                    </div>

                                    <div class="col-md-auto col-sm-12 text-center">
                                        <span class="d-block d-md-none fw-bold text-dark mb-1">Action</span>
                                        <button type="button" class="btn btn-danger btn-sm delete-liabilities-entry" title="Remove"> &times; </button>
                                    </div>
                                </div>

                            }
                        }
                    </div>
                </div>
            </div>
        </div>




    </fieldset>
    <!--7. Manage  Debt  -->
    <fieldset class="d-flex flex-column gap-2 fieldset-green">
        <legend style="color: #3B3737" class="fw-bold"> 💸 3.4 Debt</legend>

        <legend style="color: #3B3737" class="fw-bold">Bad Loans</legend>
        <div class="row g-3" style="color:	#006400">
            <div class="col-12 col-md-3">
                <label asp-for="loanDebtDetailViewModel.GoldLoan" class="form-label gap-1 d-flex"></label>
                <input asp-for="loanDebtDetailViewModel.GoldLoan" type="text" class="form-control amount-input" placeholder="0.00" maxlength="15">
                <span asp-validation-for="loanDebtDetailViewModel.GoldLoan" class="text-danger"></span>
            </div>

            <div class="col-12 col-md-3">
                <label asp-for="loanDebtDetailViewModel.CreditCard" class="form-label gap-1 d-flex"></label>
                <input asp-for="loanDebtDetailViewModel.CreditCard" type="text" class="form-control amount-input" placeholder="0.00" maxlength="15">
                <span asp-validation-for="loanDebtDetailViewModel.CreditCard" class="text-danger"></span>
            </div>

            <div class="col-12 col-md-3">
                <label asp-for="loanDebtDetailViewModel.PersonalLoan" class="form-label gap-1 d-flex"></label>
                <input asp-for="loanDebtDetailViewModel.PersonalLoan" type="text" class="form-control amount-input" placeholder="0.00" maxlength="15">
                <span asp-validation-for="loanDebtDetailViewModel.PersonalLoan" class="text-danger"></span>
            </div>

            <div class="col-12 col-md-3">
                <label asp-for="loanDebtDetailViewModel.BadLoanOthers" class="form-label gap-1 d-flex"></label>
                <input asp-for="loanDebtDetailViewModel.BadLoanOthers" type="text" class="form-control amount-input" placeholder="0.00" maxlength="15">
                <span asp-validation-for="loanDebtDetailViewModel.BadLoanOthers" class="text-danger"></span>
            </div>
        </div>

        <legend style="color: #3B3737" class="fw-bold">Good Loans</legend>
        <div class="row g-3" style="color:	#006400">
            <div class="col-12 col-md-3">
                <label asp-for="loanDebtDetailViewModel.HomeLoan" class="form-label gap-1 d-flex"></label>
                <input asp-for="loanDebtDetailViewModel.HomeLoan" type="text" class="form-control amount-input" placeholder="0.00" maxlength="15">
                <span asp-validation-for="loanDebtDetailViewModel.HomeLoan" class="text-danger"></span>
            </div>

            <div class="col-12 col-md-3">
                <label asp-for="loanDebtDetailViewModel.EducationLoan" class="form-label gap-1 d-flex"></label>
                <input asp-for="loanDebtDetailViewModel.EducationLoan" type="text" class="form-control amount-input" placeholder="0.00" maxlength="15">
                <span asp-validation-for="loanDebtDetailViewModel.EducationLoan" class="text-danger"></span>
            </div>

            <div class="col-12 col-md-3">
                <label asp-for="loanDebtDetailViewModel.BusinessLoan" class="form-label gap-1 d-flex"></label>
                <input asp-for="loanDebtDetailViewModel.BusinessLoan" type="text" class="form-control amount-input" placeholder="0.00" maxlength="15">
                <span asp-validation-for="loanDebtDetailViewModel.BusinessLoan" class="text-danger"></span>
            </div>

            <div class="col-12 col-md-3">
                <label asp-for="loanDebtDetailViewModel.GoodLoanOthers" class="form-label gap-1 d-flex"></label>
                <input asp-for="loanDebtDetailViewModel.GoodLoanOthers" type="text" class="form-control amount-input" placeholder="0.00" maxlength="15">
                <span asp-validation-for="loanDebtDetailViewModel.GoodLoanOthers" class="text-danger"></span>
            </div>
        </div>
    </fieldset>
    <!--8. Manage  Insurance  -->
    <fieldset class="d-flex flex-column gap-2 fieldset-blue">
        <legend class="d-flex justify-content-between align-items-center fw-bold" style="color: #3B3737;">
            🟢 3.5 Insurance
        </legend>
        <legend style="color: #3B3737" class="fw-bold ms-3"> Life Insurance</legend>

        <div class="card shadow-sm rounded-3">
            <div class="card-header bg-primary text-white d-flex align-items-center justify-content-between">
                <h5 class="mb-0 d-flex align-items-center">
                    <i class="fas fa-hand-holding-usd me-2"></i>Edited data will be saved after click on SUBMIT button
                </h5>
                <button type="button" id="addNewlifeInsurance" class="btn btn-outline-light btn-sm btn-white-background">+ Add New</button>
            </div>
            <div class="card-body" id="newLifeInsuranceSectionContainer">
                <!-- Column Headers -->
                <div class="row fw-bold text-dark align-items-center p-2 mb-1 d-none d-md-flex">
                    <div class="col-sm text-center">Insurance Type</div>
                    <div class="col-sm text-center">Name</div>
                    <div class="col-sm text-center">Amount of Coverage</div>
                    <div class="col-sm text-center">Premium Due 📅</div>
                    <div class="col-sm text-center">Maturity 📅</div>
                    <div class="col-md-auto text-end">Action</div>
                </div>

                @if (Model.LifeInsuranceViewModel != null && Model.LifeInsuranceViewModel.Count > 0)
                {

                    @for (int i = 0; i < Model.LifeInsuranceViewModel.Count; i++)
                    {

                        <div class="row g-2 align-items-center p-2 mb-1 saving-life-insurance justify-content-between">

                            <div class="col-sm">
                                <span class="d-block d-md-none fw-bold text-dark mb-1">Insurance Typ</span>
                                @Html.DropDownListFor(m => m.LifeInsuranceViewModel[i].InsuranceType,
                                new List<SelectListItem>
                                                {
                                                new SelectListItem { Text = "Term Insurance", Value = "Term Insurance" },
                                                new SelectListItem { Text = "Endowment Insurance", Value = "Endowment Insurance" },
                                                new SelectListItem { Text = "Unit Linked Insurance", Value = "Unit Linked Insurance" },
                                                new SelectListItem { Text = "Others", Value = "Others" },

                                                },
                                                "Select",
                                                new { @class = "form-select", required = "required" })

                    </div>

                    <div class="col-sm">
                        <span class="d-block d-md-none fw-bold text-dark mb-1">Name</span>
                        @Html.DropDownListFor(m => m.LifeInsuranceViewModel[i].Name,
                                                ViewBag.NameOptions as List<SelectListItem>,
                                                "Select",
                                                new { @class = "form-select", required = "required" })
                        @Html.ValidationMessageFor(m => m.LifeInsuranceViewModel[i].Name, "", new { @class = "text-danger small" })
                    </div>

                    <div class="col-sm">
                        <span class="d-block d-md-none fw-bold text-dark mb-1">Amount of Coverage</span>
                        @Html.TextBoxFor(m => m.LifeInsuranceViewModel[i].AmountOfCoverage, new { @class = "form-control amount-input", placeholder = "0.00", required = "required" })
                        @Html.ValidationMessageFor(m => m.LifeInsuranceViewModel[i].AmountOfCoverage, "", new { @class = "text-danger small" })
                    </div>

                    <div class="col-sm">
                        <span class="d-block d-md-none fw-bold text-dark mb-1">Premium Due 📅</span>
                        @Html.TextBox($"LifeInsuranceViewModel[{i}].PremiumDueDate",
                                                Model.LifeInsuranceViewModel[i].PremiumDueDate?.ToString("dd/MM/yyyy"),
                                                new { @class = "form-control datepicker", placeholder = "dd/MM/yyyy", required = "required" })
                        @Html.ValidationMessageFor(m => m.LifeInsuranceViewModel[i].PremiumDueDate, "", new { @class = "text-danger small" })
                    </div>

                    <div class="col-sm">
                        <span class="d-block d-md-none fw-bold text-dark mb-1">Maturity 📅</span>
                        @Html.TextBox($"LifeInsuranceViewModel[{i}].MaturityDate",
                                                Model.LifeInsuranceViewModel[i].MaturityDate?.ToString("dd/MM/yyyy"),
                                                new { @class = "form-control datepicker", placeholder = "dd/MM/yyyy", required = "required" })
                        @Html.ValidationMessageFor(m => m.LifeInsuranceViewModel[i].MaturityDate, "", new { @class = "text-danger small" })
                    </div>

                    <div class="col-md-auto col-sm-12 text-center">
                        <span class="d-block d-md-none fw-bold text-dark mb-1">Action</span>
                        <button type="button" class="btn btn-danger btn-sm delete-insurance-entry" title="Remove">&times;</button>
                    </div>

                </div>
                                }
                                }

            </div>
        </div>
        <hr />

        <legend class="d-flex justify-content-between align-items-center fw-bold" style="color: #3B3737;">
            🟠  General Insurance
        </legend>

        <div class="card shadow-sm rounded-3">
            <div class="card-header bg-primary text-white d-flex align-items-center justify-content-between">
                <h5 class="mb-0 d-flex align-items-center">
                    <i class="fas fa-hand-holding-usd me-2"></i>Edited data will be saved after click on SUBMIT button
                </h5>
                <button type="button" id="addNewGenllifeInsurance" class="btn btn-outline-light btn-sm btn-white-background">+ Add New</button>
            </div>

            <div class="card-body" id="newGenLifeInsuranceSectionContainer">
                <!-- Column Headers -->
                <div class="row fw-bold text-dark align-items-center p-2 mb-1 d-none d-md-flex">
                    <div class="col-sm text-center">Insurance Type</div>
                    <div class="col-sm text-center">Amount of Coverage</div>
                    <div class="col-sm text-center">Premium Due 📅</div>
                    <div class="col-sm text-center">Maturity 📅</div>
                    <div class="col-md-auto text-end">Action</div>
                </div>
                @if (Model.GeneralInsuranceViewModel != null && Model.GeneralInsuranceViewModel.Count > 0)
                {
                    @for (int i = 0; i < Model.GeneralInsuranceViewModel.Count; i++)
                    {
                        <div class="row g-2 align-items-center p-2 mb-1  saving-Gen-life-insurance justify-content-between">
                            <div class="col-sm">
                                <span class="d-block d-md-none fw-bold text-dark mb-1">Insurance Typ</span>
                                @Html.DropDownListFor(m => m.GeneralInsuranceViewModel[i].InsuranceType,
                                new List<SelectListItem>
                                                {
                                                new SelectListItem { Text = "Individual Mediclaim", Value = "Individual Mediclaim" },
                                                new SelectListItem { Text = "Family Floter Mediclaim", Value = "Family Floter Mediclaim" },
                                                new SelectListItem { Text = "Home & House Hold Insurance", Value = "Home & House Hold Insurance" },
                                                new SelectListItem { Text = "Vehical Insurance", Value = "Vehical Insurance" },
                                                new SelectListItem { Text = "Others", Value = "Others" },

                                                },
                                                "Select",
                                                new { @class = "form-select", required = "required" })

                        @Html.ValidationMessageFor(m => m.GeneralInsuranceViewModel[i].InsuranceType, "", new { @class = "text-danger" })
                    </div>
                    <div class="col-sm">
                        <span class="d-block d-md-none fw-bold text-dark mb-1">Amount of Coverage</span>
                        @Html.TextBoxFor(m => m.GeneralInsuranceViewModel[i].AmountOfCoverage, new { @class = "form-control amount-input", placeholder = "0.00", required = "required" })
                        @Html.ValidationMessageFor(m => m.GeneralInsuranceViewModel[i].AmountOfCoverage, "", new { @class = "text-danger small" })
                    </div>

                    <div class="col-sm">
                        <span class="d-block d-md-none fw-bold text-dark mb-1">Premium Due 📅</span>
                        @Html.TextBox($"GeneralInsuranceViewModel[{i}].PremiumDueDate",
                                                Model.GeneralInsuranceViewModel[i].PremiumDueDate?.ToString("dd/MM/yyyy"),
                                                new { @class = "form-control datepicker", placeholder = "dd/MM/yyyy", required = "required" })
                        @Html.ValidationMessageFor(m => m.GeneralInsuranceViewModel[i].PremiumDueDate, "", new { @class = "text-danger small" })
                    </div>

                    <div class="col-sm">
                        <span class="d-block d-md-none fw-bold text-dark mb-1">Maturity 📅</span>
                        @Html.TextBox($"GeneralInsuranceViewModel[{i}].MaturityDate",
                                                Model.GeneralInsuranceViewModel[i].MaturityDate?.ToString("dd/MM/yyyy"),
                                                new { @class = "form-control datepicker", placeholder = "dd/MM/yyyy", required = "required" })
                        @Html.ValidationMessageFor(m => m.GeneralInsuranceViewModel[i].MaturityDate, "", new { @class = "text-danger small" })
                    </div>

                    <div class="col-md-auto col-sm-12 text-center">
                        <span class="d-block d-md-none fw-bold text-dark mb-1">Action</span>
                        <button type="button" class="btn btn-danger btn-sm delete-gen-insurance-entry" title="Remove">&times;</button>
                    </div>


                </div>

                                }
                                }
            </div>
        </div>


    </fieldset>
    @* <div class="d-flex justify-content-between align-items-center mt-3 mx-5">
    <div>
    <button type="submit" class="btn btn-primary" id="saveButton">💾 Submit Income</button>
    </div>

    <div class="d-flex justify-content-between mt-4">
    <div>
    <a href="@Url.Action("Wings", "Comprehensive")" class="btn btn-primary px-5 py-1 rounded">Previous</a>
    </div>
    <div id="nextButtonContainer" class="d-none ms-3">
    <a href="@Url.Action("KnowledgeThatMatters", "Comprehensive")" class="btn btn-primary px-5 py-1 rounded">Next</a>
    </div>
    </div>
    </div> *@



    <div class="row g-3" style="color: #006400;">
        <div class="col-12 text-center">
            <div id="errorSummary" class="mt-3 text-danger fw-bold"></div>

        </div>
    </div>
    <div class="row g-3" mt-3 mx-5" style="color:	#006400">
        <!-- Previous (left) -->
        <div class="col-4 d-flex justify-content-start">
            <a href="@Url.Action("Wings", userPlan, new { id = _profileId })"
               class="btn saveButton d-flex align-items-center justify-content-center"
               style="width: 150px; height: 45px;">
                ⬅️ <span class="ms-2">Previous</span>
            </a>
        </div>

        <!-- Submit (center) -->
        <div class="col-4 d-flex justify-content-center">
            <button type="submit" class="btn saveButton d-flex align-items-center justify-content-center"
                    style="width: 150px; height: 45px;" id="saveButton">
                💾 <span class="ms-2">Submit</span>
            </button>

        </div>

        <!-- Next (right) -->
        <div class="col-4 d-flex justify-content-end d-none" id="nextButtonContainer">

            <a href="@Url.Action("KnowledgeThatMatters", @userPlan, new { id = _profileId })"
               class="btn saveButton d-flex align-items-center justify-content-center"
               style="width: 150px; height: 45px;">
                <span class="me-2">Next</span> ➡️
            </a>
        </div>
    </div>
</form>



@section Scripts {
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-validate/1.19.5/jquery.validate.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-validation-unobtrusive/3.2.12/jquery.validate.unobtrusive.min.js"></script>
    <script src="https://code.jquery.com/ui/1.13.2/jquery-ui.min.js"></script>
    <script>
        let incomeExtraIndex = @Model.IncomeExtras?.Count ?? 0;
        let spouseExtraIndex = @Model.SpouseExtras?.Count ?? 0;
        let newExpenseNewnIndex = @Model.ExpenseNew?.Count ?? 0;
        let newSavingsIndex = @Model.NewSavings?.Count ?? 0;
        let newEmiIndex = @Model.EmiDetail?.Count ?? 0;
        let newLifeInsuranceIndex = @Model.LifeInsuranceViewModel?.Count ?? 0;
        let newGenLifeInsuranceIndex = @Model.GeneralInsuranceViewModel?.Count ?? 0;
        let newInvestmentIndex = @Model.NewInvestments?.Count ?? 0;
        let newOtherAssetsIndex = @Model.NewOtherAssets?.Count ?? 0;
        let newNewLiabilitiesIndex = @Model.NewLiabilities?.Count ?? 0;



        $('#addIncomeExtra').on('click', function () {
            const newIncomeExtra = `
                        <div class="row g-2 align-items-center p-2 mb-1 income-extra">
                                   <div class="col-sm">
                                <span class="d-block d-md-none fw-bold text-dark mb-1">Other Income</span>
                                <input type="text"
                                       name="IncomeExtras[${incomeExtraIndex}].FieldName"
                                       placeholder="Name"
                                       required
                                       class="form-control w-100" />
                                <span class="field-validation-valid text-danger"
                                      data-valmsg-for="IncomeExtras[${incomeExtraIndex}].FieldName"
                                      data-valmsg-replace="true"></span>
                            </div>

                                   <div class="col-sm">
                                <span class="d-block d-md-none fw-bold text-dark mb-1">Amount</span>
                                <input type="number"
                                       name="IncomeExtras[${incomeExtraIndex}].FieldValue"
                                               placeholder="0.00" maxlength="15"
                                       required
                                       class="form-control w-100 amount-input" />
                                <span class="field-validation-valid text-danger"
                                      data-valmsg-for="IncomeExtras[${incomeExtraIndex}].FieldValue"
                                      data-valmsg-replace="true"></span>
                            </div>

                           <div class="col-sm">
                                <span class="d-block d-md-none fw-bold text-dark mb-1">Type (Monthly/Annual)</span>
                                <select name="IncomeExtras[${incomeExtraIndex}].Type"
                                        required
                                        class="form-select">
                                    <option value="" disabled selected>Select</option>
                                    <option value="Monthly">Monthly</option>
                                    <option value="Annual">Annual</option>
                                </select>
                                <span class="field-validation-valid text-danger"
                                      data-valmsg-for="IncomeExtras[${incomeExtraIndex}].Type"
                                      data-valmsg-replace="true"></span>
                            </div>

                                     <div class="col-md-auto col-sm-12 text-center">
                                <span class="d-block d-md-none fw-bold text-dark mb-1">Action</span>
                                <button type="button"
                                        class="btn btn-danger btn-sm delete-income-extra"
                                        title="Remove">&times;</button>
                            </div>
                        </div>


                    `;

            $('#incomeExtrasContainer').append(newIncomeExtra);

            incomeExtraIndex++;
            $.validator.unobtrusive.parse('#alertnessForm');
        });

        //reindexing
        function reindexIncomeExtraRows() {
            $('#incomeExtrasContainer .income-extra').each(function (index) {
                $(this).find('input, select').each(function () {
                    let nameAttr = $(this).attr('name');
                    if (nameAttr) {
                        const updatedName = nameAttr.replace(/\[\d+\]/, `[${index}]`);
                        $(this).attr('name', updatedName);
                    }

                    // Also update validation message spans if needed
                    let valMsgFor = $(this).next('[data-valmsg-for]');
                    if (valMsgFor.length > 0) {
                        const updatedValMsgFor = nameAttr.replace(/\[\d+\]/, `[${index}]`);
                        valMsgFor.attr('data-valmsg-for', updatedValMsgFor);
                    }
                });
            });
        }

        $('#addSpouseExtra').on('click', function () {
            const newSpouseExtra = `
                                <div class="row g-2 align-items-center p-2 mb-1 spouse-extra">
                                   <div class="col-sm">
                                    <span class="d-block d-md-none fw-bold text-dark mb-1">Other Income</span>
                                    <input type="text"
                                    name="SpouseExtras[${spouseExtraIndex}].FieldName" placeholder="Name"
                                    required
                                    class="form-control" />
                                    <span class="field-validation-valid text-danger" data-valmsg-for="SpouseExtras[${spouseExtraIndex}].FieldName" data-valmsg-replace="true"></span>
                                </div>
                                         <div class="col-sm">
                                                    <span class="d-block d-md-none fw-bold text-dark mb-1">Amount</span>
                                                            <input type="number"
                                                            name="SpouseExtras[${spouseExtraIndex}].FieldValue"
                                                                    placeholder="0.00" maxlength="15"
                                                            required
                                                            class="form-control" />
                                    <span class="field-validation-valid text-danger" data-valmsg-for="SpouseExtras[${spouseExtraIndex}].FieldValue" data-valmsg-replace="true"></span>
                                </div>
                                                <div class="col-sm">
                                                    <span class="d-block d-md-none fw-bold text-dark mb-1">Type (Monthly/Annual)</span>
                                    <select name="SpouseExtras[${spouseExtraIndex}].Type" required class="form-select">
                                        <option value="" disabled selected>Select</option>
                                        <option value="Monthly">Monthly</option>
                                        <option value="Annual">Annual</option>
                                    </select>
                                    <span class="field-validation-valid text-danger" data-valmsg-for="SpouseExtras[${spouseExtraIndex}].Type" data-valmsg-replace="true"></span>
                                </div>
                                               <div class="col-md-auto col-sm-12 text-center">
                                                <span class="d-block d-md-none fw-bold text-dark mb-1">Action</span>
                                             <button type="button" class="btn btn-danger btn-sm delete-spouse-extra" title="Remove">&times;</button>
                                </div>
                            </div

                        `;

            $('#spouseExtrasContainer').append(newSpouseExtra);
            spouseExtraIndex++;
            $.validator.unobtrusive.parse('#alertnessForm');
        });

        //reindexing
        function reindexIncomeSpouseExtraRows() {
            $('#spouseExtrasContainer .spouse-extra').each(function (index) {
                $(this).find('input, select').each(function () {
                    let nameAttr = $(this).attr('name');
                    if (nameAttr) {
                        const updatedName = nameAttr.replace(/\[\d+\]/, `[${index}]`);
                        $(this).attr('name', updatedName);
                    }

                    // Also update validation message spans if needed
                    let valMsgFor = $(this).next('[data-valmsg-for]');
                    if (valMsgFor.length > 0) {
                        const updatedValMsgFor = nameAttr.replace(/\[\d+\]/, `[${index}]`);
                        valMsgFor.attr('data-valmsg-for', updatedValMsgFor);
                    }
                });
            });
        }

        $('#addExpenseNewContainer').on('click', function () {
            const index = newExpenseNewnIndex;

            const newExpenseNew = `
                                    <div class="row g-2 align-items-center p-2 mb-1 expense-new">
                                              <div class="col-sm">
                                                    <span class="d-block d-md-none fw-bold text-dark mb-1">Other Expense Name</span>
                                    <input type="text" name="ExpenseNew[${index}].FieldName" placeholder="Name" required class="form-control" />
                                    <span class="field-validation-valid text-danger" data-valmsg-for="ExpenseNew[${index}].FieldName" data-valmsg-replace="true"></span>
                                </div>
                                            <div class="col-sm">
                                                    <span class="d-block d-md-none fw-bold text-dark mb-1">Amount </span>
                                            <input type="number" name="ExpenseNew[${index}].FieldValue" placeholder="0.00" maxlength="15" required class="form-control" />
                                    <span class="field-validation-valid text-danger" data-valmsg-for="ExpenseNew[${index}].FieldValue" data-valmsg-replace="true"></span>
                                </div>
                                                 <div class="col-sm">
                                                    <span class="d-block d-md-none fw-bold text-dark mb-1">Expense Category</span>
                                    <select name="ExpenseNew[${index}].Section" required class="form-select">
                                        <option value="" disabled selected>Select</option>
                                        <option value="Home">Home</option>
                                        <option value="Conveyance">Conveyance</option>
                                        <option value="Communication">Communication</option>
                                        <option value="Utilities">Utilities</option>
                                        <option value="Education">Education</option>
                                        <option value="Entertainment">Entertainment</option>
                                        <option value="Recreation">Recreation</option>
                                        <option value="Replacement Item">Replacement Item</option>
                                        <option value="Insurance">Insurance</option>
                                    </select>
                                    <span class="field-validation-valid text-danger" data-valmsg-for="ExpenseNew[${index}].Section" data-valmsg-replace="true"></span>
                                </div>
                                       <div class="col-sm">
                                                            <span class="d-block d-md-none fw-bold text-dark mb-1">(Monthly/Annual)</span>
                                    <select name="ExpenseNew[${index}].Type" required class="form-select">
                                        <option value="" disabled selected>Select</option>
                                        <option value="Monthly">Monthly</option>
                                        <option value="Annual">Annual</option>
                                    </select>
                                    <span class="field-validation-valid text-danger" data-valmsg-for="ExpenseNew[${index}].Type" data-valmsg-replace="true"></span>
                                </div>
                                       <div class="col-md-auto col-sm-12 text-center">
                                                    <span class="d-block d-md-none fw-bold text-dark mb-1">Action</span>
                                    <button type="button" class="btn btn-danger btn-sm delete-expense-new" title="Remove">&times;</button>
                                </div>
                            </div

                        `;

            $('#expenseNewContainer').append(newExpenseNew);
            newExpenseNewnIndex++;

            $.validator.unobtrusive.parse('#alertnessForm');
        });
        //reindexing
        function reindexExpenseNewRows() {
            $('#expenseNewContainer .expense-new').each(function (index) {
                $(this).find('input, select').each(function () {
                    let nameAttr = $(this).attr('name');
                    if (nameAttr) {
                        const updatedName = nameAttr.replace(/\[\d+\]/, `[${index}]`);
                        $(this).attr('name', updatedName);
                    }

                    // Also update validation message spans if needed
                    let valMsgFor = $(this).next('[data-valmsg-for]');
                    if (valMsgFor.length > 0) {
                        const updatedValMsgFor = nameAttr.replace(/\[\d+\]/, `[${index}]`);
                        valMsgFor.attr('data-valmsg-for', updatedValMsgFor);
                    }
                });
            });
        }



        //savingnew

        $('#addNewSaving').on('click', function () {
            const index = newSavingsIndex;

            const newSaving = `
                                 <div class="saving-entry mb-3 row g-2 align-items-center">
                            <div class="col-md-2">
                                        <span class="d-block d-md-none fw-bold text-dark mb-1"> Saving Name</span>

                                                 <input type="text" name="NewSavings[${index}].Name" placeholder="Name"  maxlength="15" required class="form-control" />
                                         <span class="field-validation-valid text-danger" data-valmsg-for="NewSavings[${index}].Name" data-valmsg-replace="true"></span>
                            </div>
                                       <div class="col-md-2">
                                                <span class="d-block d-md-none fw-bold text-dark mb-1"> Current Value</span>
                                <input type="number" name="NewSavings[${index}].CurrentValue" placeholder="0.00"  maxlength="15" required class="form-control" />
                                <span class="field-validation-valid text-danger" data-valmsg-for="NewSavings[${index}].CurrentValue" data-valmsg-replace="true"></span>
                            </div>
                                          <div class="col-md-2">
                                                <span class="d-block d-md-none fw-bold text-dark mb-1"> Monthly Contribution</span>
                                        <input type="number" name="NewSavings[${index}].MonthlyContribution" placeholder="0.00" maxlength="15" required class="form-control" />
                                <span class="field-validation-valid text-danger" data-valmsg-for="NewSavings[${index}].MonthlyContribution" data-valmsg-replace="true"></span>
                            </div>
                                     <div class="col-md-2">
                                                <span class="d-block d-md-none fw-bold text-dark mb-1"> Till When (dd/MM/yyyy)</span>
                                     <input type="text" name="NewSavings[${index}].TillWhen" required class="form-control datepicker" />
                                <span class="field-validation-valid text-danger" data-valmsg-for="NewSavings[${index}].TillWhen" data-valmsg-replace="true"></span>

                            </div>
                             <div class="col-md-2">
                                        <span class="d-block d-md-none fw-bold text-dark mb-1"> Follow Up </span>
                                <select name="NewSavings[${index}].FollowUp" required class="form-select">
                                    <option value="">Select</option>
                                    <option value="true">Yes</option>
                                    <option value="false">No</option>
                                </select>
                                <span class="field-validation-valid text-danger" data-valmsg-for="NewSavings[${index}].FollowUp" data-valmsg-replace="true"></span>
                            </div>
                                <div class="col-12 col-md-2">
                                                <span class="d-block d-md-none fw-bold text-dark mb-1"> Action</span>
                                <button type="button" class="btn btn-danger btn-sm delete-saving-entry" title="Remove">&times;</button>
                            </div>
                        </div>
                    `;

            $('#newSavingsContainer').append(newSaving);
            newSavingsIndex++;

            // Re-parse validation for new fields
            $.validator.unobtrusive.parse('#alertnessForm');

            $('#newSavingsContainer .datepicker').last().datepicker({
                dateFormat: "dd/mm/yy",
                changeYear: true,
                changeMonth: true,
                yearRange: "1900:2100" // optional: limits the year dropdown range
            });
        });

        function reindexSavingsRows() {
            $('#newSavingsContainer .saving-entry').each(function (index) {
                $(this).find('input, select').each(function () {
                    let nameAttr = $(this).attr('name');
                    if (nameAttr) {
                        const updatedName = nameAttr.replace(/\[\d+\]/, `[${index}]`);
                        $(this).attr('name', updatedName);
                    }

                    // Also update validation message spans if needed
                    let valMsgFor = $(this).next('[data-valmsg-for]');
                    if (valMsgFor.length > 0) {
                        const updatedValMsgFor = nameAttr.replace(/\[\d+\]/, `[${index}]`);
                        valMsgFor.attr('data-valmsg-for', updatedValMsgFor);
                    }
                });
            });
        }



        //emi detail

        $('#addNewEmi').on('click', function () {
            const index = newEmiIndex;
            const EmiDetail = `
                                           <div class="row g-2 align-items-center p-2 mb-1 saving-emi-entry justify-content-between">
                                    <div class="col-sm">
                              <span class="d-block d-md-none fw-bold text-dark mb-1">EMI Type</span>
                              <input type="text" name="EmiDetail[${index}].Name" placeholder="EMI Type" required class="form-control" />
                              <span class="field-validation-valid text-danger" data-valmsg-for="EmiDetail[${index}].Name" data-valmsg-replace="true"></span>
                           </div>
                                          <div class="col-sm">
                                <span class="d-block d-md-none fw-bold text-dark mb-1">   EMI Monthly</span>
                                <input type="number" name="EmiDetail[${index}].Monthly" placeholder="0.00" maxlength="15" required class="form-control emi-type-input" />
                                <span class="field-validation-valid text-danger" data-valmsg-for="EmiDetail[${index}].Monthly" data-valmsg-replace="true"></span>
                             </div>

                        <div class="col-sm">
                                              <span class="d-block d-md-none fw-bold text-dark mb-1 text-start text-md-center">Interest Component</span>
                                      <input type="number" name="EmiDetail[${index}].Interest" placeholder="0" maxlength="15" required class="form-control emi-type-input" />
                              <span class="field-validation-valid text-danger" data-valmsg-for="EmiDetail[${index}].Interest" data-valmsg-replace="true"></span>
                           </div>
                           <div class="col-sm">
                                                      <span class="d-block d-md-none fw-bold text-dark mb-1 text-start text-md-center"> Principal Component</span>
                                      <input type="number" name="EmiDetail[${index}].Principal" placeholder="0.00" maxlength="15" required class="form-control emi-type-input" />
                                      <span class="field-validation-valid text-danger" data-valmsg-for="EmiDetail[${index}].Principal" data-valmsg-replace="true"></span>
                            </div>
                          <div class="col-sm">
                                              <span class="d-block d-md-none fw-bold text-dark mb-1">  Outstanding <br>Principal</span>
                              <input type="number" name="EmiDetail[${index}].Outstanding" placeholder="0.00" maxlength="15" required class="form-control emi-type-input" />
                              <span class="field-validation-valid text-danger" data-valmsg-for="EmiDetail[${index}].Outstanding" data-valmsg-replace="true"></span>
                           </div>

                           <div class="col-sm">
                                      <span class="d-block d-md-none fw-bold text-dark mb-1"> Till   When</span>
                              <input type="text" name="EmiDetail[${index}].Till" placeholder="dd/MM/yyyy" required class="form-control datepicker" />
                              <span class="field-validation-valid text-danger" data-valmsg-for="EmiDetail[${index}].Till" data-valmsg-replace="true"></span>
                           </div>
                                 <div class="col-sm">
                            <div class="d-flex flex-column align-items-start align-items-md-end w-100">
                              <span class="d-block d-md-none fw-bold text-dark mb-1">  FollowUp</span>
                              <select name="EmiDetail[${index}].FollowUp" required class="form-select">
                                 <option value="">Select</option>
                                 <option value="true">Yes</option>
                                 <option value="false">No</option>
                              </select>
                              <span class="field-validation-valid text-danger" data-valmsg-for="EmiDetail[${index}].FollowUp" data-valmsg-replace="true"></span>
                              </div>
                           </div>

                              <div class="col-md-auto col-sm-12 text-center">
                                <span class="d-block d-md-none fw-bold text-dark mb-1">Action</span>
                              <button type="button" class="btn btn-danger btn-sm delete-emi-entry" title="Remove"> &times; </button>
                            </div>

                        </div>`;

            $('#newEmiSectionContainer').append(EmiDetail);
            newEmiIndex++;

            // Re-parse validation for new fields
            $.validator.unobtrusive.parse('#alertnessForm');

            $('#newEmiSectionContainer .datepicker').last().datepicker({
                dateFormat: "dd/mm/yy",
                changeYear: true,
                changeMonth: true,
                yearRange: "1900:2100" // optional: limits the year dropdown range
            });
        });

        //reindexing
        function reindexEmiRows() {
            $('#newEmiSectionContainer .saving-emi-entry').each(function (index) {
                $(this).find('input, select').each(function () {
                    let nameAttr = $(this).attr('name');
                    if (nameAttr) {
                        const updatedName = nameAttr.replace(/\[\d+\]/, `[${index}]`);
                        $(this).attr('name', updatedName);
                    }

                    // Also update validation message spans if needed
                    let valMsgFor = $(this).next('[data-valmsg-for]');
                    if (valMsgFor.length > 0) {
                        const updatedValMsgFor = nameAttr.replace(/\[\d+\]/, `[${index}]`);
                        valMsgFor.attr('data-valmsg-for', updatedValMsgFor);
                    }
                });
            });
        }

        //addNewInvestment
        $('#addNewInvestment').on('click', function () {
            const newInvestmentExtra = `

                                              <div class="row g-2 align-items-center p-2 mb-1 investment-new">
                                                                      <div class="col-sm">
                                                                     <span class="d-block d-md-none fw-bold text-dark mb-1">Investment Name</span>
                                                      <input type="text" name="NewInvestments[${newInvestmentIndex}].InvestmentName" placeholder="Investment Name" required class="form-control" />
                                                     <span class="field-validation-valid text-danger" data-valmsg-for="NewInvestments[${newInvestmentIndex}].InvestmentName" data-valmsg-replace="true"></span>
                                                </div>
                                                               <div class="col-sm">
                                                                <span class="d-block d-md-none fw-bold text-dark mb-1">Amount</span>
                                                         <input type="number" name="NewInvestments[${newInvestmentIndex}].Amount" placeholder="0.00" maxlength="15" required class="form-control" />
                                                           <span class="field-validation-valid text-danger" data-valmsg-for="NewInvestments[${newInvestmentIndex}].Amount" data-valmsg-replace="true"></span>
                                                </div>
                                                                  <div class="col-md-auto col-sm-12 text-center">
                                                                  <span class="d-block d-md-none fw-bold text-dark mb-1">Action</span>
                                                          <button type="button" class="btn btn-danger btn-sm delete-investment-new" title="Remove"> &times; </button>
                                                </div>

                                            </div

                                        `;

            $('#addNewInvestmentContainer').append(newInvestmentExtra);
            newInvestmentIndex++;
            $.validator.unobtrusive.parse('#alertnessForm');
        });

        //reindexing
        function reindexInvestmentNewRows() {
            $('#addNewInvestmentContainer .investment-new').each(function (index) {
                $(this).find('input, select').each(function () {
                    let nameAttr = $(this).attr('name');
                    if (nameAttr) {
                        const updatedName = nameAttr.replace(/\[\d+\]/, `[${index}]`);
                        $(this).attr('name', updatedName);
                    }

                    // Also update validation message spans if needed
                    let valMsgFor = $(this).next('[data-valmsg-for]');
                    if (valMsgFor.length > 0) {
                        const updatedValMsgFor = nameAttr.replace(/\[\d+\]/, `[${index}]`);
                        valMsgFor.attr('data-valmsg-for', updatedValMsgFor);
                    }
                });
            });
        }




        //other new asset newOtherAssetsIndex--

        $('#addNewOtherAssets').on('click', function () {
            const newOtherAssetsExtra = `
                                             <div class="row g-2 align-items-center p-2 mb-1 other-assets-new">
                                                         <div class="col-sm">
                                                    <span class="d-block d-md-none fw-bold text-dark mb-1">Asset Name</span>
                                                        <input type="text" name="NewOtherAssets[${newOtherAssetsIndex}].AssetName" placeholder="Asset Name" required class="form-control" />
                                                           <span class="field-validation-valid text-danger" data-valmsg-for="NewOtherAssets[${newOtherAssetsIndex}].AssetName" data-valmsg-replace="true"></span>
                                                </div>
                                                          <div class="col-sm">
                                                                <span class="d-block d-md-none fw-bold text-dark mb-1">Amount</span>
                                                         <input type="number" name="NewOtherAssets[${newOtherAssetsIndex}].Amount" placeholder="0.00" maxlength="15" required class="form-control" />
                                                         <span class="field-validation-valid text-danger" data-valmsg-for="NewOtherAssets[${newOtherAssetsIndex}].Amount" data-valmsg-replace="true"></span>
                                                </div>
                                                                   <div class="col-md-auto col-sm-12 text-center">
                                                                          <span class="d-block d-md-none fw-bold text-dark mb-1">Action</span>
                                                                                  <button type="button" class="btn btn-danger btn-sm delete-otherAssets-new" title="Remove"> &times; </button>
                                                  </div>

                                                </div>
                                        `;

            $('#addNewOtherAssetsContainer').append(newOtherAssetsExtra);
            newOtherAssetsIndex++;
            $.validator.unobtrusive.parse('#alertnessForm');
        });

        //reindexing
        function reindexOtherAssetsRows() {
            $('#addNewOtherAssetsContainer .other-assets-new').each(function (index) {
                $(this).find('input, select').each(function () {
                    let nameAttr = $(this).attr('name');
                    if (nameAttr) {
                        const updatedName = nameAttr.replace(/\[\d+\]/, `[${index}]`);
                        $(this).attr('name', updatedName);
                    }

                    // Also update validation message spans if needed
                    let valMsgFor = $(this).next('[data-valmsg-for]');
                    if (valMsgFor.length > 0) {
                        const updatedValMsgFor = nameAttr.replace(/\[\d+\]/, `[${index}]`);
                        valMsgFor.attr('data-valmsg-for', updatedValMsgFor);
                    }
                });
            });
        }


        //Add new libalities
        $('#addNewLiabilities').on('click', function () {
            const newaddNewLiabilitiesExtra = `
                                                      <div class="row g-2 align-items-center p-2 mb-1 liabilities-entry-new">
                                                                   <div class="col-sm">
                                                                  <span class="d-block d-md-none fw-bold text-dark mb-1">Liabilities Name</span>
                                                                  <input type="text" name="NewLiabilities[${newNewLiabilitiesIndex}].LiabilityName" placeholder="Liability Name" required class="form-control" />
                                                             <span class="field-validation-valid text-danger" data-valmsg-for="NewLiabilities[${newNewLiabilitiesIndex}].LiabilityName" data-valmsg-replace="true"></span>
                                                        </div>
                                                                               <div class="col-sm">
                                                                        <span class="d-block d-md-none fw-bold text-dark mb-1">Amount</span>
                                                                                    <input type="number" name="NewLiabilities[${newNewLiabilitiesIndex}].Amount" placeholder="0.00" maxlength="15" required class="form-control" />
                                                                    <span class="field-validation-valid text-danger" data-valmsg-for="NewLiabilities[${newNewLiabilitiesIndex}].Amount" data-valmsg-replace="true"></span>
                                                        </div>
                                                                 <div class="col-md-auto col-sm-12 text-center">
                                                                  <span class="d-block d-md-none fw-bold text-dark mb-1">Action</span>
                                                                         <button type="button" class="btn btn-danger btn-sm delete-liabilities-entry" title="Remove"> &times; </button>
                                                        </div>
                                                    </div>

                                                `;

            $('#addNewLiabilitiesContainer').append(newaddNewLiabilitiesExtra);
            newNewLiabilitiesIndex++;
            $.validator.unobtrusive.parse('#alertnessForm');
        });

        function reindexLiabilitiesRows() {
            $('#addNewLiabilitiesContainer .liabilities-entry-new').each(function (index) {
                $(this).find('input, select').each(function () {
                    let nameAttr = $(this).attr('name');
                    if (nameAttr) {
                        const updatedName = nameAttr.replace(/\[\d+\]/, `[${index}]`);
                        $(this).attr('name', updatedName);
                    }

                    // Also update validation message spans if needed
                    let valMsgFor = $(this).next('[data-valmsg-for]');
                    if (valMsgFor.length > 0) {
                        const updatedValMsgFor = nameAttr.replace(/\[\d+\]/, `[${index}]`);
                        valMsgFor.attr('data-valmsg-for', updatedValMsgFor);
                    }
                });
            });
        }







        //Add new life Insurance
        $('#addNewlifeInsurance').on('click', function () {
            const index = newLifeInsuranceIndex;
            const lIDetail = `
                                    <div class="row g-2 align-items-center p-2 mb-1 saving-life-insurance ">
                                                <div class="col-sm">
                                                <span class="d-block d-md-none fw-bold text-dark mb-1">Insurance Typ</span>
                                            <select name="LifeInsuranceViewModel[${index}].InsuranceType" required class="form-select">
                                                <option value="" disabled selected>Select</option>
                                                <option value="Term Insurance">Term Insurance</option>
                                                <option value="Endowment Insurance">Endowment Insurance</option>
                                                <option value="Unit Linked Insurance">Unit Linked Insurance</option>
                                                <option value="Others">Others</option>
                                            </select>
                                <span class="field-validation-valid text-danger" data-valmsg-for="LifeInsuranceViewModel[${index}].InsuranceType" data-valmsg-replace="true"></span>
                             </div>

                                     <div class="col-sm">
                                         <span class="d-block d-md-none fw-bold text-dark mb-1">Name</span>
                                         <select name="LifeInsuranceViewModel[${index}].Name" required class="form-select">
                                             <option value="">Select</option>
                                     @if (ViewBag.NameOptions != null)
                                     {
                                             foreach (var item in (List<SelectListItem>)ViewBag.NameOptions)
                                             {
                                                                     <option value="@item.Value">@item.Text</option>
                                             }
                                     }
                                         </select>
                                         <span class="field-validation-valid text-danger" data-valmsg-for="LifeInsuranceViewModel[${index}].Name" data-valmsg-replace="true"></span>
                                     </div>
                                <div class="col-sm">
                                                <span class="d-block d-md-none fw-bold text-dark mb-1">Amount of Coverage</span>
                                    <input type="number" name="LifeInsuranceViewModel[${index}].AmountOfCoverage" placeholder="0.00" maxlength="15" required class="form-control" />
                            <span class="field-validation-valid text-danger" data-valmsg-for="LifeInsuranceViewModel[${index}].AmountOfCoverage" data-valmsg-replace="true"></span>
                        </div>

                                         <div class="col-sm">
                                                <span class="d-block d-md-none fw-bold text-dark mb-1">Premium Due 📅</span>
                            <input type="text" name="LifeInsuranceViewModel[${index}].PremiumDueDate" placeholder="dd/MM/yyyy" required class="form-control datepicker" />
                            <span class="field-validation-valid text-danger" data-valmsg-for="LifeInsuranceViewModel[${index}].PremiumDueDate" data-valmsg-replace="true"></span>
                        </div>
                                 <div class="col-sm">
                                                        <span class="d-block d-md-none fw-bold text-dark mb-1">Maturity 📅</span>
                            <input type="text" name="LifeInsuranceViewModel[${index}].MaturityDate" placeholder="dd/MM/yyyy" required class="form-control datepicker" />
                            <span class="field-validation-valid text-danger" data-valmsg-for="LifeInsuranceViewModel[${index}].MaturityDate" data-valmsg-replace="true"></span>
                        </div>

                                              <div class="col-md-auto col-sm-12 text-center">
                                                <span class="d-block d-md-none fw-bold text-dark mb-1">Action</span>
                                                <button type="button" class="btn btn-danger btn-sm delete-insurance-entry" title="Remove">&times;</button>
                                            </div>


                </div>`;

            $('#newLifeInsuranceSectionContainer').append(lIDetail);
            newLifeInsuranceIndex++;

            // Re-parse validation for new fields
            $.validator.unobtrusive.parse('#alertnessForm');

            //
            $('#newLifeInsuranceSectionContainer .datepicker').datepicker({
                dateFormat: "dd/mm/yy",
                changeYear: true,
                changeMonth: true,
                yearRange: "1900:2100" // optional: limits the year dropdown range
            });
        });


        //reindexing
        function reindexLifeInsuranceeRows() {
            $('#newLifeInsuranceSectionContainer .saving-life-insurance').each(function (index) {
                $(this).find('input, select').each(function () {
                    let nameAttr = $(this).attr('name');
                    if (nameAttr) {
                        const updatedName = nameAttr.replace(/\[\d+\]/, `[${index}]`);
                        $(this).attr('name', updatedName);
                    }

                    // Also update validation message spans if needed
                    let valMsgFor = $(this).next('[data-valmsg-for]');
                    if (valMsgFor.length > 0) {
                        const updatedValMsgFor = nameAttr.replace(/\[\d+\]/, `[${index}]`);
                        valMsgFor.attr('data-valmsg-for', updatedValMsgFor);
                    }
                });
            });
        }



        //Add new Genral life Insurance
        $('#addNewGenllifeInsurance').on('click', function () {
            const index = newGenLifeInsuranceIndex;

            const glIDetail = `
                                <div class="row g-2 align-items-center p-2 mb-1 saving-Gen-life-insurance">
                                      <div class="col-sm">
                                                <span class="d-block d-md-none fw-bold text-dark mb-1">Insurance Typ</span>
                                                <select name="GeneralInsuranceViewModel[${index}].InsuranceType" required class="form-select">
                                                <option value="" disabled selected>Select</option>
                                                <option value="Individual Mediclaim">Individual Mediclaim</option>
                                                <option value="Family Floter Mediclaim">Family Floter Mediclaim</option>
                                                <option value="Home & House Hold Insurance">Home & House Hold Insurance</option>
                                                <option value="Vehical Insurance">Vehical Insurance</option>
                                                <option value="Others">Others</option>
                                            </select>
                                    <span class="field-validation-valid text-danger" data-valmsg-for="GeneralInsuranceViewModel[${index}].InsuranceType" data-valmsg-replace="true"></span>
                                 </div>

                                 <div class="col-sm">
                                                        <span class="d-block d-md-none fw-bold text-dark mb-1">Amount of Coverage</span>
                                        <input type="number" name="GeneralInsuranceViewModel[${index}].AmountOfCoverage" placeholder="0.00" maxlength="15" required class="form-control " />
                                    <span class="field-validation-valid text-danger" data-valmsg-for="GeneralInsuranceViewModel[${index}].AmountOfCoverage" data-valmsg-replace="true"></span>
                                    </div>
                                  <div class="col-sm">
                                                                <span class="d-block d-md-none fw-bold text-dark mb-1">Premium Due 📅</span>
                                     <input type="text" name="GeneralInsuranceViewModel[${index}].PremiumDueDate" placeholder="dd/MM/yyyy" required class="form-control datepicker" />
                                    <span class="field-validation-valid text-danger" data-valmsg-for="GeneralInsuranceViewModel[${index}].PremiumDueDate" data-valmsg-replace="true"></span>
                                 </div>

                            <div class="col-sm">
                                                        <span class="d-block d-md-none fw-bold text-dark mb-1">Maturity 📅</span>
                                    <input type="text" name="GeneralInsuranceViewModel[${index}].MaturityDate" placeholder="dd/MM/yyyy" required class="form-control datepicker" />
                                    <span class="field-validation-valid text-danger" data-valmsg-for="GeneralInsuranceViewModel[${index}].MaturityDate" data-valmsg-replace="true"></span>
                           </div>


                                         <div class="col-md-auto col-sm-12 text-center">
                                                        <span class="d-block d-md-none fw-bold text-dark mb-1">Action</span>
                                                        <button type="button" class="btn btn-danger btn-sm delete-gen-insurance-entry" title="Remove">&times;</button>
                       </div>


                </div>`;

            $('#newGenLifeInsuranceSectionContainer').append(glIDetail);
            newGenLifeInsuranceIndex++;

            // Re-parse validation for new fields
            $.validator.unobtrusive.parse('#alertnessForm');

            //
            $('#newGenLifeInsuranceSectionContainer .datepicker').datepicker({
                dateFormat: "dd/mm/yy",
                changeYear: true,
                changeMonth: true,
                yearRange: "1900:2100" // optional: limits the year dropdown range
            });
        });



        //reindexing
        function reindexGeneralInsuranceRows() {
            $('#newGenLifeInsuranceSectionContainer .saving-Gen-life-insurance').each(function (index) {
                $(this).find('input, select').each(function () {
                    let nameAttr = $(this).attr('name');
                    if (nameAttr) {
                        const updatedName = nameAttr.replace(/\[\d+\]/, `[${index}]`);
                        $(this).attr('name', updatedName);
                    }

                    // Also update validation message spans if needed
                    let valMsgFor = $(this).next('[data-valmsg-for]');
                    if (valMsgFor.length > 0) {
                        const updatedValMsgFor = nameAttr.replace(/\[\d+\]/, `[${index}]`);
                        valMsgFor.attr('data-valmsg-for', updatedValMsgFor);
                    }
                });
            });
        }






        // Delete buttons for Income Extras
        $('#incomeExtrasContainer').on('click', '.delete-income-extra', function () {
            $(this).closest('.income-extra').remove();
            reindexIncomeExtraRows();
        });

        // Delete buttons for Spouse Income Extras

        $('#spouseExtrasContainer').on('click', '.delete-spouse-extra', function () {
            $(this).closest('.spouse-extra').remove();
            reindexIncomeSpouseExtraRows();
        });


        $('#expenseNewContainer').on('click', '.delete-expense-new', function () {
            $(this).closest('.expense-new').remove();

            reindexExpenseNewRows();
        });

        // Delete buttons for new saving
        $(document).on('click', '.delete-saving-entry', function () {
            $(this).closest('.saving-entry').remove();
            reindexSavingsRows();
        });

        // Delete buttons for new saving
        $(document).on('click', '.delete-emi-entry', function () {
            $(this).closest('.saving-emi-entry').remove();
            reindexEmiRows();
        });

        //Delete button for new investment net worth
        $(document).on('click', '.delete-investment-new', function () {
            $(this).closest('.investment-new').remove();

            reindexInvestmentNewRows();
        });


        //Delete button for new Other Assets net worth
        $(document).on('click', '.delete-otherAssets-new', function () {
            $(this).closest('.other-assets-new').remove();
            reindexOtherAssetsRows();
        });


        //Delete button for new New Liability net worth
        $(document).on('click', '.delete-liabilities-entry', function () {
            $(this).closest('.liabilities-entry-new').remove();

            reindexLiabilitiesRows();
        });



        // Delete buttons for life Insurance
        $(document).on('click', '.delete-insurance-entry', function () {
            $(this).closest('.saving-life-insurance').remove();
            reindexLifeInsuranceeRows();
        });

        // Delete buttons for life Insurance
        $(document).on('click', '.delete-gen-insurance-entry', function () {
            $(this).closest('.saving-Gen-life-insurance').remove();
            reindexGeneralInsuranceRows();
        });

        $('#alertnessForm').on('submit', function (e) {
            e.preventDefault();

            document.querySelectorAll('.amount-input').forEach(input => {
                input.value = unformatINR(input.value);
            });
            const form = $(this);
            if (!form.valid()) return;
            const formData = form.serialize();
            $.ajax({
                url: '@Url.Action("Alertness", @userPlan)',
                type: 'POST',
                data: formData,
                success: function (response) {
                    if (response.success) {
                        $('#errorSummary,#errorSummarySave').removeClass('text-danger').addClass('text-success').text(response.message);
                       // location.reload();
                        localStorage.setItem('showNextButton', 'true');
                         setTimeout(function () {
                             location.reload();
                            }, 2000);

                    } else {
                        $('#errorSummary,#errorSummarySave').removeClass('text-success').addClass('text-danger').text(response.message || 'An error occurred.');
                        localStorage.removeItem('showNextButton');
                    }
                },
                error: function () {
                    $('#errorSummary,#errorSummarySave').removeClass('text-success').addClass('text-danger').text('Something went wrong. Please try again.');
                }
            });
        });
    </script>

    <script>
        $(document).ready(function () {
            $('.readOnlySection')
                .find('input, select, textarea, button')
                .attr('disabled', true);
        });
    </script>


    <script>
        $(function () {
            $('.datepicker').datepicker({
                dateFormat: "dd/mm/yy",
                changeYear: true,
                changeMonth: true,
                yearRange: "1900:2100" // optional: limits the year dropdown range
            });
        });

    </script>

    <script>
            // function calculateTotalPercent() {
            //     const must = parseFloat(document.getElementById("mustHavePercent").value) || 0;
            //     const optional = parseFloat(document.getElementById("optionalPercent").value) || 0;
            //     const savings = parseFloat(document.getElementById("savingsPercent").value) || 0;

            //     const total = must + optional + savings;

            //     const totalDiv = document.getElementById("totalPercent");
            //     const saveButton = document.getElementById("saveButton");

            //     totalDiv.innerText = total.toFixed(2) + "%";

            //     if (total > 100) {
            //         totalDiv.classList.remove("text-success");
            //         totalDiv.classList.add("text-danger");
            //         saveButton.disabled = true;
            //     } else {
            //         totalDiv.classList.remove("text-danger");
            //         totalDiv.classList.add("text-success");
            //         saveButton.disabled = false;
            //     }
            // }

            // document.addEventListener("DOMContentLoaded", function () {
            //     const fields = ["mustHavePercent", "optionalPercent", "savingsPercent"];
            //     fields.forEach(id => {
            //         document.getElementById(id).addEventListener("input", calculateTotalPercent);
            //     });

            //     // Initial calculation on page load (useful for edit mode)
            //     calculateTotalPercent();
            // });


            function calculateTotalPercent() {
            const must = parseFloat(document.getElementById("mustHavePercent").value) || 0;
            const optional = parseFloat(document.getElementById("optionalPercent").value) || 0;
            const savings = parseFloat(document.getElementById("savingsPercent").value) || 0;

            const total = must + optional + savings;

            const totalDiv = document.getElementById("totalPercent");
            const saveButton = document.getElementById("saveButton");

            totalDiv.innerText = total.toFixed(2) + "%";

            if (total > 100) {
                totalDiv.classList.remove("text-success");
                totalDiv.classList.add("text-danger");
                if (saveButton) saveButton.disabled = true;
            } else {
                totalDiv.classList.remove("text-danger");
                totalDiv.classList.add("text-success");
                if (saveButton) saveButton.disabled = false;
            }
        }

        document.addEventListener("DOMContentLoaded", function () {
            const defaultValues = {
                mustHavePercent: 50,
                optionalPercent: 30,
                savingsPercent: 20
            };

            Object.keys(defaultValues).forEach(id => {
                const field = document.getElementById(id);
                if (field && (!field.value || parseFloat(field.value) === 0)) {
                    field.value = defaultValues[id];
                }
            });

            // Add input listeners
            ["mustHavePercent", "optionalPercent", "savingsPercent"].forEach(id => {
                const field = document.getElementById(id);
                if (field) {
                    field.addEventListener("input", calculateTotalPercent);
                }
            });

            // Initial calculation
            calculateTotalPercent();
        });




            // function formatINR(value) {
            //     if (!value) return '';
            //     let number = parseFloat(value);
            //     if (isNaN(number)) return value;

            //     number = Math.round(number);// Round off

            //     return number.toLocaleString('en-IN');// Format in Indian style (e.g., 1,23,456)
            // }

            // function unformatINR(value) {
            //     return value.replace(/,/g, '');
            // }

            // document.querySelectorAll('.amount-input').forEach(input => {
            //     // On blur → format the number
            //     input.addEventListener('blur', () => {
            //         let rawValue = unformatINR(input.value);
            //         input.value = formatINR(rawValue);
            //     });

            //     // On focus → unformat it
            //     input.addEventListener('focus', () => {
            //         input.value = unformatINR(input.value);
            //     });
            // });



            function formatINR(value) {
                if (!value) return '';

                let number = parseFloat(value);
                if (isNaN(number)) return value;

                number = Math.round(number)

                // return number.toLocaleString('en-IN', {
                //     minimumFractionDigits: 2,
                //     maximumFractionDigits: 2
                // });
                return number.toLocaleString('en-IN');
            }

            function unformatINR(value) {
                return value.replace(/,/g, '');
            }

            document.addEventListener('DOMContentLoaded', function () {
                document.querySelectorAll('.amount-input').forEach(input => {
                    // Format on page load
                    input.value = formatINR(input.value);

                    // Unformat on focus
                    input.addEventListener('focus', () => {
                        input.value = unformatINR(input.value);
                    });

                    // Format on blur
                    input.addEventListener('blur', () => {
                        let raw = unformatINR(input.value);
                        input.value = formatINR(raw);
                    });

                     // ✅ Format on initial load
        if (input.value) {
            let raw = unformatINR(input.value);
            input.value = formatINR(raw);
        }

                });
            });

            //for next Button
            $(document).ready(function () {
                if (localStorage.getItem('showNextButton') === 'true') {
                    $('#nextButtonContainer').removeClass('d-none');
                    localStorage.removeItem('showNextButton'); // Clear the flag after use
                }
            });

    </script>

    <!--income Monthly culculation sum in incomeExtrasTotal -->

    <script>
        function parseValue(value) {
            if (!value) return 0; // handles null, undefined, empty string
            const cleaned = value.toString().replace(/,/g, '').trim();
            const parsed = parseFloat(cleaned);
            return isNaN(parsed) ? 0 : parsed;
        }

        function calculateIncomeExtrasTotal() {
            let total = 0;
            document.querySelectorAll('.income-extra-input').forEach(function (input) {
                total += parseValue(input.value);
            });

            const el = document.getElementById('incomeExtrasTotal');
            if (el) {
                el.textContent = total.toLocaleString('en-IN', {
                    minimumFractionDigits: 0,
                    maximumFractionDigits: 0
                });
            }

            return total;
        }

        function calculateAnnualExtrasTotal() {
            let total = 0;
            document.querySelectorAll('.income-extra-annual-input').forEach(function (input) {
                total += parseValue(input.value);
            });

            const el = document.getElementById('incomeExtrasAnnualTotal');
            if (el) {
                el.textContent = total.toLocaleString('en-IN', {
                    minimumFractionDigits: 0,
                    maximumFractionDigits: 0
                });
            }

            return total;
        }

        function calculateGrandTotal() {
            const monthlyTotal = calculateIncomeExtrasTotal();
            const annualTotal = calculateAnnualExtrasTotal();
            const monthlyAnnual = monthlyTotal * 12;
            const grandTotal = monthlyAnnual + annualTotal;
            const grandTotalPerMonth = Math.round(grandTotal / 12);

            const monthlyAnnualEl = document.getElementById('monthlyAnnualTotal');
            if (monthlyAnnualEl) {
                monthlyAnnualEl.textContent = monthlyAnnual.toLocaleString('en-IN', {
                    minimumFractionDigits: 0,
                    maximumFractionDigits: 0
                });
            }

            const grandTotalEl = document.getElementById('incomeExtrasGrandTotal');
            if (grandTotalEl) {
                grandTotalEl.textContent = grandTotal.toLocaleString('en-IN', {
                    minimumFractionDigits: 0,
                    maximumFractionDigits: 0
                });
            }

            const grandTotalPerMonthEl = document.getElementById('grandTotalPerMonth');
            if (grandTotalPerMonthEl) {
                grandTotalPerMonthEl.textContent = grandTotalPerMonth.toLocaleString('en-IN', {
                    minimumFractionDigits: 0,
                    maximumFractionDigits: 0
                });
            }
        }

        // Spouse functions
        function calculateIncomeExtrasTotal_Spouse() {
            let total = 0;
            document.querySelectorAll('.income-extra-input-spouse').forEach(function (input) {
                total += parseValue(input.value);
            });

            const el = document.getElementById('incomeExtrasTotalSpouse');
            if (el) {
                el.textContent = total.toLocaleString('en-IN', {
                    minimumFractionDigits: 0,
                    maximumFractionDigits: 0
                });
            }
            const spouseIncomeInput = document.getElementById('SpouseMonthlyTotalIncome');
            if (spouseIncomeInput) {
                spouseIncomeInput.value = total.toFixed(2); // raw number (not formatted with commas)
            }




            return total;
        }

        function calculateAnnualExtrasTotal_Spouse() {
            let total = 0;
            document.querySelectorAll('.income-extra-annual-input-spouse').forEach(function (input) {
                total += parseValue(input.value);
            });

            const el = document.getElementById('incomeExtrasAnnualTotalSpouse');
            if (el) {
                el.textContent = total.toLocaleString('en-IN', {
                    minimumFractionDigits: 0,
                    maximumFractionDigits: 0
                });
            }

            return total;
        }

        function calculateGrandTotal_Spouse() {
            const monthlyTotal = calculateIncomeExtrasTotal_Spouse();
            const annualTotal = calculateAnnualExtrasTotal_Spouse();
            const monthlyAnnual = monthlyTotal * 12;
            const grandTotal = monthlyAnnual + annualTotal;
            const grandTotalPerMonth = Math.round(grandTotal / 12);

            const monthlyAnnualEl = document.getElementById('monthlyAnnualTotalSpouse');
            if (monthlyAnnualEl) {
                monthlyAnnualEl.textContent = monthlyAnnual.toLocaleString('en-IN', {
                    minimumFractionDigits: 0,
                    maximumFractionDigits: 0
                });
            }

            const grandTotalEl = document.getElementById('incomeExtrasGrandTotalSpouse');
            if (grandTotalEl) {
                grandTotalEl.textContent = grandTotal.toLocaleString('en-IN', {
                    minimumFractionDigits: 0,
                    maximumFractionDigits: 0
                });
            }

            const grandTotalPerMonthEl = document.getElementById('grandTotalPerMonthSpouse');
            if (grandTotalPerMonthEl) {
                grandTotalPerMonthEl.textContent = grandTotalPerMonth.toLocaleString('en-IN', {
                    minimumFractionDigits: 0,
                    maximumFractionDigits: 0
                });
            }
        }
        //expense
        function calculateExpenseTotals() {
            let monthlyTotal = 0;
            let annualTotalOnly = 0;

            // Sum monthly inputs
            document.querySelectorAll('.income-expense-input').forEach(input => {
                monthlyTotal += parseValue(input.value);
            });

            // Sum annual inputs
            document.querySelectorAll('.income-expense-annual-input').forEach(input => {
                annualTotalOnly += parseValue(input.value);
            });

            const monthlyAnnual = monthlyTotal * 12;
            const grandTotal = monthlyAnnual + annualTotalOnly;
           // const averageMonthlyTotal = grandTotal / 12;
            const averageMonthlyTotal = Math.round(grandTotal / 12);

            // Update spans
            document.getElementById('incomeExpenseMonthlyTotal').textContent =
                `Monthly Total: ₹ ${monthlyTotal.toLocaleString('en-IN', { minimumFractionDigits: 0 })}`;

            document.getElementById('incomeExpenseMonthlyTotalAnnual').textContent =
                `Monthly × 12: ₹ ${monthlyAnnual.toLocaleString('en-IN', { minimumFractionDigits: 0 })}`;

            document.getElementById('incomeExpenseAnnualTotalOnly').textContent =
                `Annual Total: ₹ ${annualTotalOnly.toLocaleString('en-IN', { minimumFractionDigits: 0 })}`;

            const grandSpan = document.getElementById('incomeExpenseGrandTotal');
            if (grandSpan) {
                grandSpan.textContent =
                    `Grand Total (Monthly × 12 + Annual): ₹ ${grandTotal.toLocaleString('en-IN', { minimumFractionDigits: 0 })}`;
            }

            const avgMonthlySpan = document.getElementById('incomeExpenseAvgMonthlyTotal');
            if (avgMonthlySpan) {
                avgMonthlySpan.textContent =
                    `Avg. Monthly Total (Grand Total ÷ 12): ₹ ${averageMonthlyTotal.toLocaleString('en-IN', { minimumFractionDigits: 0 })}`;
            }
        }

        function roundToTwo(num) {
                return Math.round(num * 100) / 100;
            }

        // Trigger on input change
        document.addEventListener('input', function (event) {
            if (event.target.classList.contains('income-extra-input') || event.target.classList.contains('income-extra-annual-input')) {
                calculateGrandTotal();
            }
            if (event.target.classList.contains('income-extra-input-spouse') || event.target.classList.contains('income-extra-annual-input-spouse')) {
                calculateGrandTotal_Spouse();
            }
            if (event.target.classList.contains('income-expense-input') || event.target.classList.contains('income-expense-annual-input')) {
                calculateExpenseTotals();
            }
        });

        // Trigger on page load
        window.addEventListener('DOMContentLoaded', calculateGrandTotal);
        window.addEventListener('DOMContentLoaded', calculateGrandTotal_Spouse);
        window.addEventListener('DOMContentLoaded', calculateExpenseTotals);



        $('#saveAndContinueBtn').on('click', function () {
            $('#alertnessForm').trigger('submit');
        });
    </script>

}




